package ppc64

type PackageState struct {
	obj                 *obj.PackageState
	objabi              *objabi.PackageState
	sys                 *sys.PackageState
	Anames              []string
	Linkppc64           obj.LinkArch
	Linkppc64le         obj.LinkArch
	PPC64DWARFRegisters map[int16]int16
	cnames9             []string
	oprange             [608][]Optab
	optab               []Optab
	xcmp                [41][41]bool
}

func NewPackageState(obj_pstate *obj.PackageState, objabi_pstate *objabi.PackageState, sys_pstate *sys.PackageState) *PackageState {
	pstate := &PackageState{}
	pstate.obj = obj_pstate
	pstate.objabi = objabi_pstate
	pstate.sys = sys_pstate
	pstate.PPC64DWARFRegisters = map[int16]int16{}
	pstate.optab = []Optab{
		{obj.ATEXT, C_LEXT, C_NONE, C_NONE, C_TEXTSIZE, 0, 0, 0},
		{obj.ATEXT, C_LEXT, C_NONE, C_LCON, C_TEXTSIZE, 0, 0, 0},
		{obj.ATEXT, C_ADDR, C_NONE, C_NONE, C_TEXTSIZE, 0, 0, 0},
		{obj.ATEXT, C_ADDR, C_NONE, C_LCON, C_TEXTSIZE, 0, 0, 0},
		/* move register */
		{AMOVD, C_REG, C_NONE, C_NONE, C_REG, 1, 4, 0},
		{AMOVB, C_REG, C_NONE, C_NONE, C_REG, 12, 4, 0},
		{AMOVBZ, C_REG, C_NONE, C_NONE, C_REG, 13, 4, 0},
		{AMOVW, C_REG, C_NONE, C_NONE, C_REG, 12, 4, 0},
		{AMOVWZ, C_REG, C_NONE, C_NONE, C_REG, 13, 4, 0},
		{AADD, C_REG, C_REG, C_NONE, C_REG, 2, 4, 0},
		{AADD, C_REG, C_NONE, C_NONE, C_REG, 2, 4, 0},
		{AADD, C_SCON, C_REG, C_NONE, C_REG, 4, 4, 0},
		{AADD, C_SCON, C_NONE, C_NONE, C_REG, 4, 4, 0},
		{AADD, C_ADDCON, C_REG, C_NONE, C_REG, 4, 4, 0},
		{AADD, C_ADDCON, C_NONE, C_NONE, C_REG, 4, 4, 0},
		{AADD, C_UCON, C_REG, C_NONE, C_REG, 20, 4, 0},
		{AADD, C_UCON, C_NONE, C_NONE, C_REG, 20, 4, 0},
		{AADD, C_ANDCON, C_REG, C_NONE, C_REG, 22, 8, 0},
		{AADD, C_ANDCON, C_NONE, C_NONE, C_REG, 22, 8, 0},
		{AADD, C_LCON, C_REG, C_NONE, C_REG, 22, 12, 0},
		{AADD, C_LCON, C_NONE, C_NONE, C_REG, 22, 12, 0},
		{AADDIS, C_ADDCON, C_REG, C_NONE, C_REG, 20, 4, 0},
		{AADDIS, C_ADDCON, C_NONE, C_NONE, C_REG, 20, 4, 0},
		{AADDC, C_REG, C_REG, C_NONE, C_REG, 2, 4, 0},
		{AADDC, C_REG, C_NONE, C_NONE, C_REG, 2, 4, 0},
		{AADDC, C_ADDCON, C_REG, C_NONE, C_REG, 4, 4, 0},
		{AADDC, C_ADDCON, C_NONE, C_NONE, C_REG, 4, 4, 0},
		{AADDC, C_LCON, C_REG, C_NONE, C_REG, 22, 12, 0},
		{AADDC, C_LCON, C_NONE, C_NONE, C_REG, 22, 12, 0},
		{AAND, C_REG, C_REG, C_NONE, C_REG, 6, 4, 0}, /* logical, no literal */
		{AAND, C_REG, C_NONE, C_NONE, C_REG, 6, 4, 0},
		{AANDCC, C_REG, C_REG, C_NONE, C_REG, 6, 4, 0},
		{AANDCC, C_REG, C_NONE, C_NONE, C_REG, 6, 4, 0},
		{AANDCC, C_ANDCON, C_NONE, C_NONE, C_REG, 58, 4, 0},
		{AANDCC, C_ANDCON, C_REG, C_NONE, C_REG, 58, 4, 0},
		{AANDCC, C_UCON, C_NONE, C_NONE, C_REG, 59, 4, 0},
		{AANDCC, C_UCON, C_REG, C_NONE, C_REG, 59, 4, 0},
		{AANDCC, C_ADDCON, C_NONE, C_NONE, C_REG, 23, 8, 0},
		{AANDCC, C_ADDCON, C_REG, C_NONE, C_REG, 23, 8, 0},
		{AANDCC, C_LCON, C_NONE, C_NONE, C_REG, 23, 12, 0},
		{AANDCC, C_LCON, C_REG, C_NONE, C_REG, 23, 12, 0},
		{AANDISCC, C_ANDCON, C_NONE, C_NONE, C_REG, 59, 4, 0},
		{AANDISCC, C_ANDCON, C_REG, C_NONE, C_REG, 59, 4, 0},
		{AMULLW, C_REG, C_REG, C_NONE, C_REG, 2, 4, 0},
		{AMULLW, C_REG, C_NONE, C_NONE, C_REG, 2, 4, 0},
		{AMULLW, C_ADDCON, C_REG, C_NONE, C_REG, 4, 4, 0},
		{AMULLW, C_ADDCON, C_NONE, C_NONE, C_REG, 4, 4, 0},
		{AMULLW, C_ANDCON, C_REG, C_NONE, C_REG, 4, 4, 0},
		{AMULLW, C_ANDCON, C_NONE, C_NONE, C_REG, 4, 4, 0},
		{AMULLW, C_LCON, C_REG, C_NONE, C_REG, 22, 12, 0},
		{AMULLW, C_LCON, C_NONE, C_NONE, C_REG, 22, 12, 0},
		{ASUBC, C_REG, C_REG, C_NONE, C_REG, 10, 4, 0},
		{ASUBC, C_REG, C_NONE, C_NONE, C_REG, 10, 4, 0},
		{ASUBC, C_REG, C_NONE, C_ADDCON, C_REG, 27, 4, 0},
		{ASUBC, C_REG, C_NONE, C_LCON, C_REG, 28, 12, 0},
		{AOR, C_REG, C_REG, C_NONE, C_REG, 6, 4, 0}, /* logical, literal not cc (or/xor) */
		{AOR, C_REG, C_NONE, C_NONE, C_REG, 6, 4, 0},
		{AOR, C_ANDCON, C_NONE, C_NONE, C_REG, 58, 4, 0},
		{AOR, C_ANDCON, C_REG, C_NONE, C_REG, 58, 4, 0},
		{AOR, C_UCON, C_NONE, C_NONE, C_REG, 59, 4, 0},
		{AOR, C_UCON, C_REG, C_NONE, C_REG, 59, 4, 0},
		{AOR, C_ADDCON, C_NONE, C_NONE, C_REG, 23, 8, 0},
		{AOR, C_ADDCON, C_REG, C_NONE, C_REG, 23, 8, 0},
		{AOR, C_LCON, C_NONE, C_NONE, C_REG, 23, 12, 0},
		{AOR, C_LCON, C_REG, C_NONE, C_REG, 23, 12, 0},
		{AORIS, C_ANDCON, C_NONE, C_NONE, C_REG, 59, 4, 0},
		{AORIS, C_ANDCON, C_REG, C_NONE, C_REG, 59, 4, 0},
		{ADIVW, C_REG, C_REG, C_NONE, C_REG, 2, 4, 0}, /* op r1[,r2],r3 */
		{ADIVW, C_REG, C_NONE, C_NONE, C_REG, 2, 4, 0},
		{ASUB, C_REG, C_REG, C_NONE, C_REG, 10, 4, 0}, /* op r2[,r1],r3 */
		{ASUB, C_REG, C_NONE, C_NONE, C_REG, 10, 4, 0},
		{ASLW, C_REG, C_NONE, C_NONE, C_REG, 6, 4, 0},
		{ASLW, C_REG, C_REG, C_NONE, C_REG, 6, 4, 0},
		{ASLD, C_REG, C_NONE, C_NONE, C_REG, 6, 4, 0},
		{ASLD, C_REG, C_REG, C_NONE, C_REG, 6, 4, 0},
		{ASLD, C_SCON, C_REG, C_NONE, C_REG, 25, 4, 0},
		{ASLD, C_SCON, C_NONE, C_NONE, C_REG, 25, 4, 0},
		{ASLW, C_SCON, C_REG, C_NONE, C_REG, 57, 4, 0},
		{ASLW, C_SCON, C_NONE, C_NONE, C_REG, 57, 4, 0},
		{ASRAW, C_REG, C_NONE, C_NONE, C_REG, 6, 4, 0},
		{ASRAW, C_REG, C_REG, C_NONE, C_REG, 6, 4, 0},
		{ASRAW, C_SCON, C_REG, C_NONE, C_REG, 56, 4, 0},
		{ASRAW, C_SCON, C_NONE, C_NONE, C_REG, 56, 4, 0},
		{ASRAD, C_REG, C_NONE, C_NONE, C_REG, 6, 4, 0},
		{ASRAD, C_REG, C_REG, C_NONE, C_REG, 6, 4, 0},
		{ASRAD, C_SCON, C_REG, C_NONE, C_REG, 56, 4, 0},
		{ASRAD, C_SCON, C_NONE, C_NONE, C_REG, 56, 4, 0},
		{ARLWMI, C_SCON, C_REG, C_LCON, C_REG, 62, 4, 0},
		{ARLWMI, C_REG, C_REG, C_LCON, C_REG, 63, 4, 0},
		{ARLDMI, C_SCON, C_REG, C_LCON, C_REG, 30, 4, 0},
		{ARLDC, C_SCON, C_REG, C_LCON, C_REG, 29, 4, 0},
		{ARLDCL, C_SCON, C_REG, C_LCON, C_REG, 29, 4, 0},
		{ARLDCL, C_REG, C_REG, C_LCON, C_REG, 14, 4, 0},
		{ARLDICL, C_REG, C_REG, C_LCON, C_REG, 14, 4, 0},
		{ARLDICL, C_SCON, C_REG, C_LCON, C_REG, 14, 4, 0},
		{ARLDCL, C_REG, C_NONE, C_LCON, C_REG, 14, 4, 0},
		{AFADD, C_FREG, C_NONE, C_NONE, C_FREG, 2, 4, 0},
		{AFADD, C_FREG, C_FREG, C_NONE, C_FREG, 2, 4, 0},
		{AFABS, C_FREG, C_NONE, C_NONE, C_FREG, 33, 4, 0},
		{AFABS, C_NONE, C_NONE, C_NONE, C_FREG, 33, 4, 0},
		{AFMOVD, C_FREG, C_NONE, C_NONE, C_FREG, 33, 4, 0},
		{AFMADD, C_FREG, C_FREG, C_FREG, C_FREG, 34, 4, 0},
		{AFMUL, C_FREG, C_NONE, C_NONE, C_FREG, 32, 4, 0},
		{AFMUL, C_FREG, C_FREG, C_NONE, C_FREG, 32, 4, 0},

		/* store, short offset */
		{AMOVD, C_REG, C_REG, C_NONE, C_ZOREG, 7, 4, REGZERO},
		{AMOVW, C_REG, C_REG, C_NONE, C_ZOREG, 7, 4, REGZERO},
		{AMOVWZ, C_REG, C_REG, C_NONE, C_ZOREG, 7, 4, REGZERO},
		{AMOVBZ, C_REG, C_REG, C_NONE, C_ZOREG, 7, 4, REGZERO},
		{AMOVBZU, C_REG, C_REG, C_NONE, C_ZOREG, 7, 4, REGZERO},
		{AMOVB, C_REG, C_REG, C_NONE, C_ZOREG, 7, 4, REGZERO},
		{AMOVBU, C_REG, C_REG, C_NONE, C_ZOREG, 7, 4, REGZERO},
		{AMOVD, C_REG, C_NONE, C_NONE, C_SEXT, 7, 4, REGSB},
		{AMOVW, C_REG, C_NONE, C_NONE, C_SEXT, 7, 4, REGSB},
		{AMOVWZ, C_REG, C_NONE, C_NONE, C_SEXT, 7, 4, REGSB},
		{AMOVBZ, C_REG, C_NONE, C_NONE, C_SEXT, 7, 4, REGSB},
		{AMOVB, C_REG, C_NONE, C_NONE, C_SEXT, 7, 4, REGSB},
		{AMOVD, C_REG, C_NONE, C_NONE, C_SAUTO, 7, 4, REGSP},
		{AMOVW, C_REG, C_NONE, C_NONE, C_SAUTO, 7, 4, REGSP},
		{AMOVWZ, C_REG, C_NONE, C_NONE, C_SAUTO, 7, 4, REGSP},
		{AMOVBZ, C_REG, C_NONE, C_NONE, C_SAUTO, 7, 4, REGSP},
		{AMOVB, C_REG, C_NONE, C_NONE, C_SAUTO, 7, 4, REGSP},
		{AMOVD, C_REG, C_NONE, C_NONE, C_SOREG, 7, 4, REGZERO},
		{AMOVW, C_REG, C_NONE, C_NONE, C_SOREG, 7, 4, REGZERO},
		{AMOVWZ, C_REG, C_NONE, C_NONE, C_SOREG, 7, 4, REGZERO},
		{AMOVBZ, C_REG, C_NONE, C_NONE, C_SOREG, 7, 4, REGZERO},
		{AMOVBZU, C_REG, C_NONE, C_NONE, C_SOREG, 7, 4, REGZERO},
		{AMOVB, C_REG, C_NONE, C_NONE, C_SOREG, 7, 4, REGZERO},
		{AMOVBU, C_REG, C_NONE, C_NONE, C_SOREG, 7, 4, REGZERO},

		/* load, short offset */
		{AMOVD, C_ZOREG, C_REG, C_NONE, C_REG, 8, 4, REGZERO},
		{AMOVW, C_ZOREG, C_REG, C_NONE, C_REG, 8, 4, REGZERO},
		{AMOVWZ, C_ZOREG, C_REG, C_NONE, C_REG, 8, 4, REGZERO},
		{AMOVBZ, C_ZOREG, C_REG, C_NONE, C_REG, 8, 4, REGZERO},
		{AMOVBZU, C_ZOREG, C_REG, C_NONE, C_REG, 8, 4, REGZERO},
		{AMOVB, C_ZOREG, C_REG, C_NONE, C_REG, 9, 8, REGZERO},
		{AMOVBU, C_ZOREG, C_REG, C_NONE, C_REG, 9, 8, REGZERO},
		{AMOVD, C_SEXT, C_NONE, C_NONE, C_REG, 8, 4, REGSB},
		{AMOVW, C_SEXT, C_NONE, C_NONE, C_REG, 8, 4, REGSB},
		{AMOVWZ, C_SEXT, C_NONE, C_NONE, C_REG, 8, 4, REGSB},
		{AMOVBZ, C_SEXT, C_NONE, C_NONE, C_REG, 8, 4, REGSB},
		{AMOVB, C_SEXT, C_NONE, C_NONE, C_REG, 9, 8, REGSB},
		{AMOVD, C_SAUTO, C_NONE, C_NONE, C_REG, 8, 4, REGSP},
		{AMOVW, C_SAUTO, C_NONE, C_NONE, C_REG, 8, 4, REGSP},
		{AMOVWZ, C_SAUTO, C_NONE, C_NONE, C_REG, 8, 4, REGSP},
		{AMOVBZ, C_SAUTO, C_NONE, C_NONE, C_REG, 8, 4, REGSP},
		{AMOVB, C_SAUTO, C_NONE, C_NONE, C_REG, 9, 8, REGSP},
		{AMOVD, C_SOREG, C_NONE, C_NONE, C_REG, 8, 4, REGZERO},
		{AMOVW, C_SOREG, C_NONE, C_NONE, C_REG, 8, 4, REGZERO},
		{AMOVWZ, C_SOREG, C_NONE, C_NONE, C_REG, 8, 4, REGZERO},
		{AMOVBZ, C_SOREG, C_NONE, C_NONE, C_REG, 8, 4, REGZERO},
		{AMOVBZU, C_SOREG, C_NONE, C_NONE, C_REG, 8, 4, REGZERO},
		{AMOVB, C_SOREG, C_NONE, C_NONE, C_REG, 9, 8, REGZERO},
		{AMOVBU, C_SOREG, C_NONE, C_NONE, C_REG, 9, 8, REGZERO},

		/* store, long offset */
		{AMOVD, C_REG, C_NONE, C_NONE, C_LEXT, 35, 8, REGSB},
		{AMOVW, C_REG, C_NONE, C_NONE, C_LEXT, 35, 8, REGSB},
		{AMOVWZ, C_REG, C_NONE, C_NONE, C_LEXT, 35, 8, REGSB},
		{AMOVBZ, C_REG, C_NONE, C_NONE, C_LEXT, 35, 8, REGSB},
		{AMOVB, C_REG, C_NONE, C_NONE, C_LEXT, 35, 8, REGSB},
		{AMOVD, C_REG, C_NONE, C_NONE, C_LAUTO, 35, 8, REGSP},
		{AMOVW, C_REG, C_NONE, C_NONE, C_LAUTO, 35, 8, REGSP},
		{AMOVWZ, C_REG, C_NONE, C_NONE, C_LAUTO, 35, 8, REGSP},
		{AMOVBZ, C_REG, C_NONE, C_NONE, C_LAUTO, 35, 8, REGSP},
		{AMOVB, C_REG, C_NONE, C_NONE, C_LAUTO, 35, 8, REGSP},
		{AMOVD, C_REG, C_NONE, C_NONE, C_LOREG, 35, 8, REGZERO},
		{AMOVW, C_REG, C_NONE, C_NONE, C_LOREG, 35, 8, REGZERO},
		{AMOVWZ, C_REG, C_NONE, C_NONE, C_LOREG, 35, 8, REGZERO},
		{AMOVBZ, C_REG, C_NONE, C_NONE, C_LOREG, 35, 8, REGZERO},
		{AMOVB, C_REG, C_NONE, C_NONE, C_LOREG, 35, 8, REGZERO},
		{AMOVD, C_REG, C_NONE, C_NONE, C_ADDR, 74, 8, 0},
		{AMOVW, C_REG, C_NONE, C_NONE, C_ADDR, 74, 8, 0},
		{AMOVWZ, C_REG, C_NONE, C_NONE, C_ADDR, 74, 8, 0},
		{AMOVBZ, C_REG, C_NONE, C_NONE, C_ADDR, 74, 8, 0},
		{AMOVB, C_REG, C_NONE, C_NONE, C_ADDR, 74, 8, 0},

		/* load, long offset */
		{AMOVD, C_LEXT, C_NONE, C_NONE, C_REG, 36, 8, REGSB},
		{AMOVW, C_LEXT, C_NONE, C_NONE, C_REG, 36, 8, REGSB},
		{AMOVWZ, C_LEXT, C_NONE, C_NONE, C_REG, 36, 8, REGSB},
		{AMOVBZ, C_LEXT, C_NONE, C_NONE, C_REG, 36, 8, REGSB},
		{AMOVB, C_LEXT, C_NONE, C_NONE, C_REG, 37, 12, REGSB},
		{AMOVD, C_LAUTO, C_NONE, C_NONE, C_REG, 36, 8, REGSP},
		{AMOVW, C_LAUTO, C_NONE, C_NONE, C_REG, 36, 8, REGSP},
		{AMOVWZ, C_LAUTO, C_NONE, C_NONE, C_REG, 36, 8, REGSP},
		{AMOVBZ, C_LAUTO, C_NONE, C_NONE, C_REG, 36, 8, REGSP},
		{AMOVB, C_LAUTO, C_NONE, C_NONE, C_REG, 37, 12, REGSP},
		{AMOVD, C_LOREG, C_NONE, C_NONE, C_REG, 36, 8, REGZERO},
		{AMOVW, C_LOREG, C_NONE, C_NONE, C_REG, 36, 8, REGZERO},
		{AMOVWZ, C_LOREG, C_NONE, C_NONE, C_REG, 36, 8, REGZERO},
		{AMOVBZ, C_LOREG, C_NONE, C_NONE, C_REG, 36, 8, REGZERO},
		{AMOVB, C_LOREG, C_NONE, C_NONE, C_REG, 37, 12, REGZERO},
		{AMOVD, C_ADDR, C_NONE, C_NONE, C_REG, 75, 8, 0},
		{AMOVW, C_ADDR, C_NONE, C_NONE, C_REG, 75, 8, 0},
		{AMOVWZ, C_ADDR, C_NONE, C_NONE, C_REG, 75, 8, 0},
		{AMOVBZ, C_ADDR, C_NONE, C_NONE, C_REG, 75, 8, 0},
		{AMOVB, C_ADDR, C_NONE, C_NONE, C_REG, 76, 12, 0},

		{AMOVD, C_TLS_LE, C_NONE, C_NONE, C_REG, 79, 4, 0},
		{AMOVD, C_TLS_IE, C_NONE, C_NONE, C_REG, 80, 8, 0},

		{AMOVD, C_GOTADDR, C_NONE, C_NONE, C_REG, 81, 8, 0},

		/* load constant */
		{AMOVD, C_SECON, C_NONE, C_NONE, C_REG, 3, 4, REGSB},
		{AMOVD, C_SACON, C_NONE, C_NONE, C_REG, 3, 4, REGSP},
		{AMOVD, C_LECON, C_NONE, C_NONE, C_REG, 26, 8, REGSB},
		{AMOVD, C_LACON, C_NONE, C_NONE, C_REG, 26, 8, REGSP},
		{AMOVD, C_ADDCON, C_NONE, C_NONE, C_REG, 3, 4, REGZERO},
		{AMOVD, C_ANDCON, C_NONE, C_NONE, C_REG, 3, 4, REGZERO},
		{AMOVW, C_SECON, C_NONE, C_NONE, C_REG, 3, 4, REGSB}, /* TO DO: check */
		{AMOVW, C_SACON, C_NONE, C_NONE, C_REG, 3, 4, REGSP},
		{AMOVW, C_LECON, C_NONE, C_NONE, C_REG, 26, 8, REGSB},
		{AMOVW, C_LACON, C_NONE, C_NONE, C_REG, 26, 8, REGSP},
		{AMOVW, C_ADDCON, C_NONE, C_NONE, C_REG, 3, 4, REGZERO},
		{AMOVW, C_ANDCON, C_NONE, C_NONE, C_REG, 3, 4, REGZERO},
		{AMOVWZ, C_SECON, C_NONE, C_NONE, C_REG, 3, 4, REGSB}, /* TO DO: check */
		{AMOVWZ, C_SACON, C_NONE, C_NONE, C_REG, 3, 4, REGSP},
		{AMOVWZ, C_LECON, C_NONE, C_NONE, C_REG, 26, 8, REGSB},
		{AMOVWZ, C_LACON, C_NONE, C_NONE, C_REG, 26, 8, REGSP},
		{AMOVWZ, C_ADDCON, C_NONE, C_NONE, C_REG, 3, 4, REGZERO},
		{AMOVWZ, C_ANDCON, C_NONE, C_NONE, C_REG, 3, 4, REGZERO},

		/* load unsigned/long constants (TO DO: check) */
		{AMOVD, C_UCON, C_NONE, C_NONE, C_REG, 3, 4, REGZERO},
		{AMOVD, C_LCON, C_NONE, C_NONE, C_REG, 19, 8, 0},
		{AMOVW, C_UCON, C_NONE, C_NONE, C_REG, 3, 4, REGZERO},
		{AMOVW, C_LCON, C_NONE, C_NONE, C_REG, 19, 8, 0},
		{AMOVWZ, C_UCON, C_NONE, C_NONE, C_REG, 3, 4, REGZERO},
		{AMOVWZ, C_LCON, C_NONE, C_NONE, C_REG, 19, 8, 0},
		{AMOVHBR, C_ZOREG, C_REG, C_NONE, C_REG, 45, 4, 0},
		{AMOVHBR, C_ZOREG, C_NONE, C_NONE, C_REG, 45, 4, 0},
		{AMOVHBR, C_REG, C_REG, C_NONE, C_ZOREG, 44, 4, 0},
		{AMOVHBR, C_REG, C_NONE, C_NONE, C_ZOREG, 44, 4, 0},
		{ASYSCALL, C_NONE, C_NONE, C_NONE, C_NONE, 5, 4, 0},
		{ASYSCALL, C_REG, C_NONE, C_NONE, C_NONE, 77, 12, 0},
		{ASYSCALL, C_SCON, C_NONE, C_NONE, C_NONE, 77, 12, 0},
		{ABEQ, C_NONE, C_NONE, C_NONE, C_SBRA, 16, 4, 0},
		{ABEQ, C_CREG, C_NONE, C_NONE, C_SBRA, 16, 4, 0},
		{ABR, C_NONE, C_NONE, C_NONE, C_LBRA, 11, 4, 0},
		{ABR, C_NONE, C_NONE, C_NONE, C_LBRAPIC, 11, 8, 0},
		{ABC, C_SCON, C_REG, C_NONE, C_SBRA, 16, 4, 0},
		{ABC, C_SCON, C_REG, C_NONE, C_LBRA, 17, 4, 0},
		{ABR, C_NONE, C_NONE, C_NONE, C_LR, 18, 4, 0},
		{ABR, C_NONE, C_NONE, C_NONE, C_CTR, 18, 4, 0},
		{ABR, C_REG, C_NONE, C_NONE, C_CTR, 18, 4, 0},
		{ABR, C_NONE, C_NONE, C_NONE, C_ZOREG, 15, 8, 0},
		{ABC, C_NONE, C_REG, C_NONE, C_LR, 18, 4, 0},
		{ABC, C_NONE, C_REG, C_NONE, C_CTR, 18, 4, 0},
		{ABC, C_SCON, C_REG, C_NONE, C_LR, 18, 4, 0},
		{ABC, C_SCON, C_REG, C_NONE, C_CTR, 18, 4, 0},
		{ABC, C_NONE, C_NONE, C_NONE, C_ZOREG, 15, 8, 0},
		{AFMOVD, C_SEXT, C_NONE, C_NONE, C_FREG, 8, 4, REGSB},
		{AFMOVD, C_SAUTO, C_NONE, C_NONE, C_FREG, 8, 4, REGSP},
		{AFMOVD, C_SOREG, C_NONE, C_NONE, C_FREG, 8, 4, REGZERO},
		{AFMOVD, C_LEXT, C_NONE, C_NONE, C_FREG, 36, 8, REGSB},
		{AFMOVD, C_LAUTO, C_NONE, C_NONE, C_FREG, 36, 8, REGSP},
		{AFMOVD, C_LOREG, C_NONE, C_NONE, C_FREG, 36, 8, REGZERO},
		{AFMOVD, C_ADDR, C_NONE, C_NONE, C_FREG, 75, 8, 0},
		{AFMOVD, C_FREG, C_NONE, C_NONE, C_SEXT, 7, 4, REGSB},
		{AFMOVD, C_FREG, C_NONE, C_NONE, C_SAUTO, 7, 4, REGSP},
		{AFMOVD, C_FREG, C_NONE, C_NONE, C_SOREG, 7, 4, REGZERO},
		{AFMOVD, C_FREG, C_NONE, C_NONE, C_LEXT, 35, 8, REGSB},
		{AFMOVD, C_FREG, C_NONE, C_NONE, C_LAUTO, 35, 8, REGSP},
		{AFMOVD, C_FREG, C_NONE, C_NONE, C_LOREG, 35, 8, REGZERO},
		{AFMOVD, C_FREG, C_NONE, C_NONE, C_ADDR, 74, 8, 0},
		{AFMOVSX, C_ZOREG, C_REG, C_NONE, C_FREG, 45, 4, 0},
		{AFMOVSX, C_ZOREG, C_NONE, C_NONE, C_FREG, 45, 4, 0},
		{AFMOVSX, C_FREG, C_REG, C_NONE, C_ZOREG, 44, 4, 0},
		{AFMOVSX, C_FREG, C_NONE, C_NONE, C_ZOREG, 44, 4, 0},
		{AFMOVSZ, C_ZOREG, C_REG, C_NONE, C_FREG, 45, 4, 0},
		{AFMOVSZ, C_ZOREG, C_NONE, C_NONE, C_FREG, 45, 4, 0},
		{ASYNC, C_NONE, C_NONE, C_NONE, C_NONE, 46, 4, 0},
		{AWORD, C_LCON, C_NONE, C_NONE, C_NONE, 40, 4, 0},
		{ADWORD, C_LCON, C_NONE, C_NONE, C_NONE, 31, 8, 0},
		{ADWORD, C_DCON, C_NONE, C_NONE, C_NONE, 31, 8, 0},
		{AADDME, C_REG, C_NONE, C_NONE, C_REG, 47, 4, 0},
		{AEXTSB, C_REG, C_NONE, C_NONE, C_REG, 48, 4, 0},
		{AEXTSB, C_NONE, C_NONE, C_NONE, C_REG, 48, 4, 0},
		{AISEL, C_LCON, C_REG, C_REG, C_REG, 84, 4, 0},
		{AISEL, C_ZCON, C_REG, C_REG, C_REG, 84, 4, 0},
		{ANEG, C_REG, C_NONE, C_NONE, C_REG, 47, 4, 0},
		{ANEG, C_NONE, C_NONE, C_NONE, C_REG, 47, 4, 0},
		{AREM, C_REG, C_NONE, C_NONE, C_REG, 50, 12, 0},
		{AREM, C_REG, C_REG, C_NONE, C_REG, 50, 12, 0},
		{AREMU, C_REG, C_NONE, C_NONE, C_REG, 50, 16, 0},
		{AREMU, C_REG, C_REG, C_NONE, C_REG, 50, 16, 0},
		{AREMD, C_REG, C_NONE, C_NONE, C_REG, 51, 12, 0},
		{AREMD, C_REG, C_REG, C_NONE, C_REG, 51, 12, 0},
		{AREMDU, C_REG, C_NONE, C_NONE, C_REG, 51, 12, 0},
		{AREMDU, C_REG, C_REG, C_NONE, C_REG, 51, 12, 0},
		{AMTFSB0, C_SCON, C_NONE, C_NONE, C_NONE, 52, 4, 0},
		{AMOVFL, C_FPSCR, C_NONE, C_NONE, C_FREG, 53, 4, 0},
		{AMOVFL, C_FREG, C_NONE, C_NONE, C_FPSCR, 64, 4, 0},
		{AMOVFL, C_FREG, C_NONE, C_LCON, C_FPSCR, 64, 4, 0},
		{AMOVFL, C_LCON, C_NONE, C_NONE, C_FPSCR, 65, 4, 0},
		{AMOVD, C_MSR, C_NONE, C_NONE, C_REG, 54, 4, 0},  /* mfmsr */
		{AMOVD, C_REG, C_NONE, C_NONE, C_MSR, 54, 4, 0},  /* mtmsrd */
		{AMOVWZ, C_REG, C_NONE, C_NONE, C_MSR, 54, 4, 0}, /* mtmsr */

		/* Other ISA 2.05+ instructions */
		{APOPCNTD, C_REG, C_NONE, C_NONE, C_REG, 93, 4, 0},  /* population count, x-form */
		{ACMPB, C_REG, C_REG, C_NONE, C_REG, 92, 4, 0},      /* compare byte, x-form */
		{ACMPEQB, C_REG, C_REG, C_NONE, C_CREG, 92, 4, 0},   /* compare equal byte, x-form */
		{AFTDIV, C_FREG, C_FREG, C_NONE, C_SCON, 92, 4, 0},  /* floating test for sw divide, x-form */
		{AFTSQRT, C_FREG, C_NONE, C_NONE, C_SCON, 93, 4, 0}, /* floating test for sw square root, x-form */
		{ACOPY, C_REG, C_NONE, C_NONE, C_REG, 92, 4, 0},     /* copy/paste facility, x-form */
		{ADARN, C_SCON, C_NONE, C_NONE, C_REG, 92, 4, 0},    /* deliver random number, x-form */
		{ALDMX, C_SOREG, C_NONE, C_NONE, C_REG, 45, 4, 0},   /* load doubleword monitored, x-form */
		{AMADDHD, C_REG, C_REG, C_REG, C_REG, 83, 4, 0},     /* multiply-add high/low doubleword, va-form */
		{AADDEX, C_REG, C_REG, C_SCON, C_REG, 94, 4, 0},     /* add extended using alternate carry, z23-form */

		/* Vector instructions */

		/* Vector load */
		{ALV, C_SOREG, C_NONE, C_NONE, C_VREG, 45, 4, 0}, /* vector load, x-form */

		/* Vector store */
		{ASTV, C_VREG, C_NONE, C_NONE, C_SOREG, 44, 4, 0}, /* vector store, x-form */

		/* Vector logical */
		{AVAND, C_VREG, C_VREG, C_NONE, C_VREG, 82, 4, 0}, /* vector and, vx-form */
		{AVOR, C_VREG, C_VREG, C_NONE, C_VREG, 82, 4, 0},  /* vector or, vx-form */

		/* Vector add */
		{AVADDUM, C_VREG, C_VREG, C_NONE, C_VREG, 82, 4, 0}, /* vector add unsigned modulo, vx-form */
		{AVADDCU, C_VREG, C_VREG, C_NONE, C_VREG, 82, 4, 0}, /* vector add & write carry unsigned, vx-form */
		{AVADDUS, C_VREG, C_VREG, C_NONE, C_VREG, 82, 4, 0}, /* vector add unsigned saturate, vx-form */
		{AVADDSS, C_VREG, C_VREG, C_NONE, C_VREG, 82, 4, 0}, /* vector add signed saturate, vx-form */
		{AVADDE, C_VREG, C_VREG, C_VREG, C_VREG, 83, 4, 0},  /* vector add extended, va-form */

		/* Vector subtract */
		{AVSUBUM, C_VREG, C_VREG, C_NONE, C_VREG, 82, 4, 0}, /* vector subtract unsigned modulo, vx-form */
		{AVSUBCU, C_VREG, C_VREG, C_NONE, C_VREG, 82, 4, 0}, /* vector subtract & write carry unsigned, vx-form */
		{AVSUBUS, C_VREG, C_VREG, C_NONE, C_VREG, 82, 4, 0}, /* vector subtract unsigned saturate, vx-form */
		{AVSUBSS, C_VREG, C_VREG, C_NONE, C_VREG, 82, 4, 0}, /* vector subtract signed saturate, vx-form */
		{AVSUBE, C_VREG, C_VREG, C_VREG, C_VREG, 83, 4, 0},  /* vector subtract extended, va-form */

		/* Vector multiply */
		{AVMULESB, C_VREG, C_VREG, C_NONE, C_VREG, 82, 4, 9},  /* vector multiply, vx-form */
		{AVPMSUM, C_VREG, C_VREG, C_NONE, C_VREG, 82, 4, 0},   /* vector polynomial multiply & sum, vx-form */
		{AVMSUMUDM, C_VREG, C_VREG, C_VREG, C_VREG, 83, 4, 0}, /* vector multiply-sum, va-form */

		/* Vector rotate */
		{AVR, C_VREG, C_VREG, C_NONE, C_VREG, 82, 4, 0}, /* vector rotate, vx-form */

		/* Vector shift */
		{AVS, C_VREG, C_VREG, C_NONE, C_VREG, 82, 4, 0},     /* vector shift, vx-form */
		{AVSA, C_VREG, C_VREG, C_NONE, C_VREG, 82, 4, 0},    /* vector shift algebraic, vx-form */
		{AVSOI, C_ANDCON, C_VREG, C_VREG, C_VREG, 83, 4, 0}, /* vector shift by octet immediate, va-form */

		/* Vector count */
		{AVCLZ, C_VREG, C_NONE, C_NONE, C_VREG, 85, 4, 0},    /* vector count leading zeros, vx-form */
		{AVPOPCNT, C_VREG, C_NONE, C_NONE, C_VREG, 85, 4, 0}, /* vector population count, vx-form */

		/* Vector compare */
		{AVCMPEQ, C_VREG, C_VREG, C_NONE, C_VREG, 82, 4, 0},   /* vector compare equal, vc-form */
		{AVCMPGT, C_VREG, C_VREG, C_NONE, C_VREG, 82, 4, 0},   /* vector compare greater than, vc-form */
		{AVCMPNEZB, C_VREG, C_VREG, C_NONE, C_VREG, 82, 4, 0}, /* vector compare not equal, vx-form */

		/* Vector permute */
		{AVPERM, C_VREG, C_VREG, C_VREG, C_VREG, 83, 4, 0}, /* vector permute, va-form */

		/* Vector bit permute */
		{AVBPERMQ, C_VREG, C_VREG, C_NONE, C_VREG, 82, 4, 0}, /* vector bit permute, vx-form */

		/* Vector select */
		{AVSEL, C_VREG, C_VREG, C_VREG, C_VREG, 83, 4, 0}, /* vector select, va-form */

		/* Vector splat */
		{AVSPLT, C_SCON, C_VREG, C_NONE, C_VREG, 82, 4, 0}, /* vector splat, vx-form */
		{AVSPLT, C_ADDCON, C_VREG, C_NONE, C_VREG, 82, 4, 0},
		{AVSPLTI, C_SCON, C_NONE, C_NONE, C_VREG, 82, 4, 0}, /* vector splat immediate, vx-form */
		{AVSPLTI, C_ADDCON, C_NONE, C_NONE, C_VREG, 82, 4, 0},

		/* Vector AES */
		{AVCIPH, C_VREG, C_VREG, C_NONE, C_VREG, 82, 4, 0},  /* vector AES cipher, vx-form */
		{AVNCIPH, C_VREG, C_VREG, C_NONE, C_VREG, 82, 4, 0}, /* vector AES inverse cipher, vx-form */
		{AVSBOX, C_VREG, C_NONE, C_NONE, C_VREG, 82, 4, 0},  /* vector AES subbytes, vx-form */

		/* Vector SHA */
		{AVSHASIGMA, C_ANDCON, C_VREG, C_ANDCON, C_VREG, 82, 4, 0}, /* vector SHA sigma, vx-form */

		/* VSX vector load */
		{ALXV, C_SOREG, C_NONE, C_NONE, C_VSREG, 87, 4, 0}, /* vsx vector load, xx1-form */

		/* VSX vector store */
		{ASTXV, C_VSREG, C_NONE, C_NONE, C_SOREG, 86, 4, 0}, /* vsx vector store, xx1-form */

		/* VSX scalar load */
		{ALXS, C_SOREG, C_NONE, C_NONE, C_VSREG, 87, 4, 0}, /* vsx scalar load, xx1-form */

		/* VSX scalar store */
		{ASTXS, C_VSREG, C_NONE, C_NONE, C_SOREG, 86, 4, 0}, /* vsx scalar store, xx1-form */

		/* VSX scalar as integer load */
		{ALXSI, C_SOREG, C_NONE, C_NONE, C_VSREG, 87, 4, 0}, /* vsx scalar as integer load, xx1-form */

		/* VSX scalar store as integer */
		{ASTXSI, C_VSREG, C_NONE, C_NONE, C_SOREG, 86, 4, 0}, /* vsx scalar as integer store, xx1-form */

		/* VSX move from VSR */
		{AMFVSR, C_VSREG, C_NONE, C_NONE, C_REG, 88, 4, 0}, /* vsx move from vsr, xx1-form */
		{AMFVSR, C_FREG, C_NONE, C_NONE, C_REG, 88, 4, 0},
		{AMFVSR, C_VREG, C_NONE, C_NONE, C_REG, 88, 4, 0},

		/* VSX move to VSR */
		{AMTVSR, C_REG, C_NONE, C_NONE, C_VSREG, 88, 4, 0}, /* vsx move to vsr, xx1-form */
		{AMTVSR, C_REG, C_REG, C_NONE, C_VSREG, 88, 4, 0},
		{AMTVSR, C_REG, C_NONE, C_NONE, C_FREG, 88, 4, 0},
		{AMTVSR, C_REG, C_NONE, C_NONE, C_VREG, 88, 4, 0},

		/* VSX logical */
		{AXXLAND, C_VSREG, C_VSREG, C_NONE, C_VSREG, 90, 4, 0}, /* vsx and, xx3-form */
		{AXXLOR, C_VSREG, C_VSREG, C_NONE, C_VSREG, 90, 4, 0},  /* vsx or, xx3-form */

		/* VSX select */
		{AXXSEL, C_VSREG, C_VSREG, C_VSREG, C_VSREG, 91, 4, 0}, /* vsx select, xx4-form */

		/* VSX merge */
		{AXXMRG, C_VSREG, C_VSREG, C_NONE, C_VSREG, 90, 4, 0}, /* vsx merge, xx3-form */

		/* VSX splat */
		{AXXSPLT, C_VSREG, C_NONE, C_SCON, C_VSREG, 89, 4, 0}, /* vsx splat, xx2-form */

		/* VSX permute */
		{AXXPERM, C_VSREG, C_VSREG, C_SCON, C_VSREG, 90, 4, 0}, /* vsx permute, xx3-form */

		/* VSX shift */
		{AXXSI, C_VSREG, C_VSREG, C_SCON, C_VSREG, 90, 4, 0}, /* vsx shift immediate, xx3-form */

		/* VSX scalar FP-FP conversion */
		{AXSCV, C_VSREG, C_NONE, C_NONE, C_VSREG, 89, 4, 0}, /* vsx scalar fp-fp conversion, xx2-form */

		/* VSX vector FP-FP conversion */
		{AXVCV, C_VSREG, C_NONE, C_NONE, C_VSREG, 89, 4, 0}, /* vsx vector fp-fp conversion, xx2-form */

		/* VSX scalar FP-integer conversion */
		{AXSCVX, C_VSREG, C_NONE, C_NONE, C_VSREG, 89, 4, 0}, /* vsx scalar fp-integer conversion, xx2-form */

		/* VSX scalar integer-FP conversion */
		{AXSCVXP, C_VSREG, C_NONE, C_NONE, C_VSREG, 89, 4, 0}, /* vsx scalar integer-fp conversion, xx2-form */

		/* VSX vector FP-integer conversion */
		{AXVCVX, C_VSREG, C_NONE, C_NONE, C_VSREG, 89, 4, 0}, /* vsx vector fp-integer conversion, xx2-form */

		/* VSX vector integer-FP conversion */
		{AXVCVXP, C_VSREG, C_NONE, C_NONE, C_VSREG, 89, 4, 0}, /* vsx vector integer-fp conversion, xx2-form */

		/* 64-bit special registers */
		{AMOVD, C_REG, C_NONE, C_NONE, C_SPR, 66, 4, 0},
		{AMOVD, C_REG, C_NONE, C_NONE, C_LR, 66, 4, 0},
		{AMOVD, C_REG, C_NONE, C_NONE, C_CTR, 66, 4, 0},
		{AMOVD, C_REG, C_NONE, C_NONE, C_XER, 66, 4, 0},
		{AMOVD, C_SPR, C_NONE, C_NONE, C_REG, 66, 4, 0},
		{AMOVD, C_LR, C_NONE, C_NONE, C_REG, 66, 4, 0},
		{AMOVD, C_CTR, C_NONE, C_NONE, C_REG, 66, 4, 0},
		{AMOVD, C_XER, C_NONE, C_NONE, C_REG, 66, 4, 0},

		/* 32-bit special registers (gloss over sign-extension or not?) */
		{AMOVW, C_REG, C_NONE, C_NONE, C_SPR, 66, 4, 0},
		{AMOVW, C_REG, C_NONE, C_NONE, C_CTR, 66, 4, 0},
		{AMOVW, C_REG, C_NONE, C_NONE, C_XER, 66, 4, 0},
		{AMOVW, C_SPR, C_NONE, C_NONE, C_REG, 66, 4, 0},
		{AMOVW, C_XER, C_NONE, C_NONE, C_REG, 66, 4, 0},
		{AMOVWZ, C_REG, C_NONE, C_NONE, C_SPR, 66, 4, 0},
		{AMOVWZ, C_REG, C_NONE, C_NONE, C_CTR, 66, 4, 0},
		{AMOVWZ, C_REG, C_NONE, C_NONE, C_XER, 66, 4, 0},
		{AMOVWZ, C_SPR, C_NONE, C_NONE, C_REG, 66, 4, 0},
		{AMOVWZ, C_XER, C_NONE, C_NONE, C_REG, 66, 4, 0},
		{AMOVFL, C_FPSCR, C_NONE, C_NONE, C_CREG, 73, 4, 0},
		{AMOVFL, C_CREG, C_NONE, C_NONE, C_CREG, 67, 4, 0},
		{AMOVW, C_CREG, C_NONE, C_NONE, C_REG, 68, 4, 0},
		{AMOVWZ, C_CREG, C_NONE, C_NONE, C_REG, 68, 4, 0},
		{AMOVFL, C_REG, C_NONE, C_NONE, C_LCON, 69, 4, 0},
		{AMOVFL, C_REG, C_NONE, C_NONE, C_CREG, 69, 4, 0},
		{AMOVW, C_REG, C_NONE, C_NONE, C_CREG, 69, 4, 0},
		{AMOVWZ, C_REG, C_NONE, C_NONE, C_CREG, 69, 4, 0},
		{ACMP, C_REG, C_NONE, C_NONE, C_REG, 70, 4, 0},
		{ACMP, C_REG, C_REG, C_NONE, C_REG, 70, 4, 0},
		{ACMP, C_REG, C_NONE, C_NONE, C_ADDCON, 71, 4, 0},
		{ACMP, C_REG, C_REG, C_NONE, C_ADDCON, 71, 4, 0},
		{ACMPU, C_REG, C_NONE, C_NONE, C_REG, 70, 4, 0},
		{ACMPU, C_REG, C_REG, C_NONE, C_REG, 70, 4, 0},
		{ACMPU, C_REG, C_NONE, C_NONE, C_ANDCON, 71, 4, 0},
		{ACMPU, C_REG, C_REG, C_NONE, C_ANDCON, 71, 4, 0},
		{AFCMPO, C_FREG, C_NONE, C_NONE, C_FREG, 70, 4, 0},
		{AFCMPO, C_FREG, C_REG, C_NONE, C_FREG, 70, 4, 0},
		{ATW, C_LCON, C_REG, C_NONE, C_REG, 60, 4, 0},
		{ATW, C_LCON, C_REG, C_NONE, C_ADDCON, 61, 4, 0},
		{ADCBF, C_ZOREG, C_NONE, C_NONE, C_NONE, 43, 4, 0},
		{ADCBF, C_SOREG, C_NONE, C_NONE, C_NONE, 43, 4, 0},
		{ADCBF, C_ZOREG, C_REG, C_NONE, C_SCON, 43, 4, 0},
		{ADCBF, C_SOREG, C_NONE, C_NONE, C_SCON, 43, 4, 0},
		{AECOWX, C_REG, C_REG, C_NONE, C_ZOREG, 44, 4, 0},
		{AECIWX, C_ZOREG, C_REG, C_NONE, C_REG, 45, 4, 0},
		{AECOWX, C_REG, C_NONE, C_NONE, C_ZOREG, 44, 4, 0},
		{AECIWX, C_ZOREG, C_NONE, C_NONE, C_REG, 45, 4, 0},
		{ALDAR, C_ZOREG, C_NONE, C_NONE, C_REG, 45, 4, 0},
		{ALDAR, C_ZOREG, C_NONE, C_ANDCON, C_REG, 45, 4, 0},
		{AEIEIO, C_NONE, C_NONE, C_NONE, C_NONE, 46, 4, 0},
		{ATLBIE, C_REG, C_NONE, C_NONE, C_NONE, 49, 4, 0},
		{ATLBIE, C_SCON, C_NONE, C_NONE, C_REG, 49, 4, 0},
		{ASLBMFEE, C_REG, C_NONE, C_NONE, C_REG, 55, 4, 0},
		{ASLBMTE, C_REG, C_NONE, C_NONE, C_REG, 55, 4, 0},
		{ASTSW, C_REG, C_NONE, C_NONE, C_ZOREG, 44, 4, 0},
		{ASTSW, C_REG, C_NONE, C_LCON, C_ZOREG, 41, 4, 0},
		{ALSW, C_ZOREG, C_NONE, C_NONE, C_REG, 45, 4, 0},
		{ALSW, C_ZOREG, C_NONE, C_LCON, C_REG, 42, 4, 0},
		{obj.AUNDEF, C_NONE, C_NONE, C_NONE, C_NONE, 78, 4, 0},
		{obj.APCDATA, C_LCON, C_NONE, C_NONE, C_LCON, 0, 0, 0},
		{obj.AFUNCDATA, C_SCON, C_NONE, C_NONE, C_ADDR, 0, 0, 0},
		{obj.ANOP, C_NONE, C_NONE, C_NONE, C_NONE, 0, 0, 0},
		{obj.ADUFFZERO, C_NONE, C_NONE, C_NONE, C_LBRA, 11, 4, 0}, // same as ABR/ABL
		{obj.ADUFFCOPY, C_NONE, C_NONE, C_NONE, C_LBRA, 11, 4, 0}, // same as ABR/ABL

		{obj.AXXX, C_NONE, C_NONE, C_NONE, C_NONE, 0, 4, 0},
	}
	pstate.Anames = []string{
		obj.A_ARCHSPECIFIC: "ADD",
		"ADDCC",
		"ADDIS",
		"ADDV",
		"ADDVCC",
		"ADDC",
		"ADDCCC",
		"ADDCV",
		"ADDCVCC",
		"ADDME",
		"ADDMECC",
		"ADDMEVCC",
		"ADDMEV",
		"ADDE",
		"ADDECC",
		"ADDEVCC",
		"ADDEV",
		"ADDZE",
		"ADDZECC",
		"ADDZEVCC",
		"ADDZEV",
		"ADDEX",
		"AND",
		"ANDCC",
		"ANDN",
		"ANDNCC",
		"ANDISCC",
		"BC",
		"BCL",
		"BEQ",
		"BGE",
		"BGT",
		"BLE",
		"BLT",
		"BNE",
		"BVC",
		"BVS",
		"CMP",
		"CMPU",
		"CMPEQB",
		"CNTLZW",
		"CNTLZWCC",
		"CRAND",
		"CRANDN",
		"CREQV",
		"CRNAND",
		"CRNOR",
		"CROR",
		"CRORN",
		"CRXOR",
		"DIVW",
		"DIVWCC",
		"DIVWVCC",
		"DIVWV",
		"DIVWU",
		"DIVWUCC",
		"DIVWUVCC",
		"DIVWUV",
		"EQV",
		"EQVCC",
		"EXTSB",
		"EXTSBCC",
		"EXTSH",
		"EXTSHCC",
		"FABS",
		"FABSCC",
		"FADD",
		"FADDCC",
		"FADDS",
		"FADDSCC",
		"FCMPO",
		"FCMPU",
		"FCTIW",
		"FCTIWCC",
		"FCTIWZ",
		"FCTIWZCC",
		"FDIV",
		"FDIVCC",
		"FDIVS",
		"FDIVSCC",
		"FMADD",
		"FMADDCC",
		"FMADDS",
		"FMADDSCC",
		"FMOVD",
		"FMOVDCC",
		"FMOVDU",
		"FMOVS",
		"FMOVSU",
		"FMOVSX",
		"FMOVSZ",
		"FMSUB",
		"FMSUBCC",
		"FMSUBS",
		"FMSUBSCC",
		"FMUL",
		"FMULCC",
		"FMULS",
		"FMULSCC",
		"FNABS",
		"FNABSCC",
		"FNEG",
		"FNEGCC",
		"FNMADD",
		"FNMADDCC",
		"FNMADDS",
		"FNMADDSCC",
		"FNMSUB",
		"FNMSUBCC",
		"FNMSUBS",
		"FNMSUBSCC",
		"FRSP",
		"FRSPCC",
		"FSUB",
		"FSUBCC",
		"FSUBS",
		"FSUBSCC",
		"ISEL",
		"MOVMW",
		"LBAR",
		"LHAR",
		"LSW",
		"LWAR",
		"LWSYNC",
		"MOVDBR",
		"MOVWBR",
		"MOVB",
		"MOVBU",
		"MOVBZ",
		"MOVBZU",
		"MOVH",
		"MOVHBR",
		"MOVHU",
		"MOVHZ",
		"MOVHZU",
		"MOVW",
		"MOVWU",
		"MOVFL",
		"MOVCRFS",
		"MTFSB0",
		"MTFSB0CC",
		"MTFSB1",
		"MTFSB1CC",
		"MULHW",
		"MULHWCC",
		"MULHWU",
		"MULHWUCC",
		"MULLW",
		"MULLWCC",
		"MULLWVCC",
		"MULLWV",
		"NAND",
		"NANDCC",
		"NEG",
		"NEGCC",
		"NEGVCC",
		"NEGV",
		"NOR",
		"NORCC",
		"OR",
		"ORCC",
		"ORN",
		"ORNCC",
		"ORIS",
		"REM",
		"REMCC",
		"REMV",
		"REMVCC",
		"REMU",
		"REMUCC",
		"REMUV",
		"REMUVCC",
		"RFI",
		"RLWMI",
		"RLWMICC",
		"RLWNM",
		"RLWNMCC",
		"SLW",
		"SLWCC",
		"SRW",
		"SRAW",
		"SRAWCC",
		"SRWCC",
		"STBCCC",
		"STSW",
		"STWCCC",
		"SUB",
		"SUBCC",
		"SUBVCC",
		"SUBC",
		"SUBCCC",
		"SUBCV",
		"SUBCVCC",
		"SUBME",
		"SUBMECC",
		"SUBMEVCC",
		"SUBMEV",
		"SUBV",
		"SUBE",
		"SUBECC",
		"SUBEV",
		"SUBEVCC",
		"SUBZE",
		"SUBZECC",
		"SUBZEVCC",
		"SUBZEV",
		"SYNC",
		"XOR",
		"XORCC",
		"XORIS",
		"DCBF",
		"DCBI",
		"DCBST",
		"DCBT",
		"DCBTST",
		"DCBZ",
		"ECIWX",
		"ECOWX",
		"EIEIO",
		"ICBI",
		"ISYNC",
		"PTESYNC",
		"TLBIE",
		"TLBIEL",
		"TLBSYNC",
		"TW",
		"SYSCALL",
		"WORD",
		"RFCI",
		"FCPSGN",
		"FCPSGNCC",
		"FRES",
		"FRESCC",
		"FRIM",
		"FRIMCC",
		"FRIP",
		"FRIPCC",
		"FRIZ",
		"FRIZCC",
		"FRIN",
		"FRINCC",
		"FRSQRTE",
		"FRSQRTECC",
		"FSEL",
		"FSELCC",
		"FSQRT",
		"FSQRTCC",
		"FSQRTS",
		"FSQRTSCC",
		"CNTLZD",
		"CNTLZDCC",
		"CMPW",
		"CMPWU",
		"CMPB",
		"FTDIV",
		"FTSQRT",
		"DIVD",
		"DIVDCC",
		"DIVDE",
		"DIVDECC",
		"DIVDEU",
		"DIVDEUCC",
		"DIVDVCC",
		"DIVDV",
		"DIVDU",
		"DIVDUCC",
		"DIVDUVCC",
		"DIVDUV",
		"EXTSW",
		"EXTSWCC",
		"FCFID",
		"FCFIDCC",
		"FCFIDU",
		"FCFIDUCC",
		"FCFIDS",
		"FCFIDSCC",
		"FCTID",
		"FCTIDCC",
		"FCTIDZ",
		"FCTIDZCC",
		"LDAR",
		"MOVD",
		"MOVDU",
		"MOVWZ",
		"MOVWZU",
		"MULHD",
		"MULHDCC",
		"MULHDU",
		"MULHDUCC",
		"MULLD",
		"MULLDCC",
		"MULLDVCC",
		"MULLDV",
		"RFID",
		"RLDMI",
		"RLDMICC",
		"RLDIMI",
		"RLDIMICC",
		"RLDC",
		"RLDCCC",
		"RLDCR",
		"RLDCRCC",
		"RLDICR",
		"RLDICRCC",
		"RLDCL",
		"RLDCLCC",
		"RLDICL",
		"RLDICLCC",
		"ROTL",
		"ROTLW",
		"SLBIA",
		"SLBIE",
		"SLBMFEE",
		"SLBMFEV",
		"SLBMTE",
		"SLD",
		"SLDCC",
		"SRD",
		"SRAD",
		"SRADCC",
		"SRDCC",
		"STDCCC",
		"TD",
		"DWORD",
		"REMD",
		"REMDCC",
		"REMDV",
		"REMDVCC",
		"REMDU",
		"REMDUCC",
		"REMDUV",
		"REMDUVCC",
		"HRFID",
		"POPCNTD",
		"POPCNTW",
		"POPCNTB",
		"COPY",
		"PASTECC",
		"DARN",
		"LDMX",
		"MADDHD",
		"MADDHDU",
		"MADDLD",
		"LV",
		"LVEBX",
		"LVEHX",
		"LVEWX",
		"LVX",
		"LVXL",
		"LVSL",
		"LVSR",
		"STV",
		"STVEBX",
		"STVEHX",
		"STVEWX",
		"STVX",
		"STVXL",
		"VAND",
		"VANDC",
		"VNAND",
		"VOR",
		"VORC",
		"VNOR",
		"VXOR",
		"VEQV",
		"VADDUM",
		"VADDUBM",
		"VADDUHM",
		"VADDUWM",
		"VADDUDM",
		"VADDUQM",
		"VADDCU",
		"VADDCUQ",
		"VADDCUW",
		"VADDUS",
		"VADDUBS",
		"VADDUHS",
		"VADDUWS",
		"VADDSS",
		"VADDSBS",
		"VADDSHS",
		"VADDSWS",
		"VADDE",
		"VADDEUQM",
		"VADDECUQ",
		"VSUBUM",
		"VSUBUBM",
		"VSUBUHM",
		"VSUBUWM",
		"VSUBUDM",
		"VSUBUQM",
		"VSUBCU",
		"VSUBCUQ",
		"VSUBCUW",
		"VSUBUS",
		"VSUBUBS",
		"VSUBUHS",
		"VSUBUWS",
		"VSUBSS",
		"VSUBSBS",
		"VSUBSHS",
		"VSUBSWS",
		"VSUBE",
		"VSUBEUQM",
		"VSUBECUQ",
		"VMULESB",
		"VMULOSB",
		"VMULEUB",
		"VMULOUB",
		"VMULESH",
		"VMULOSH",
		"VMULEUH",
		"VMULOUH",
		"VMULESW",
		"VMULOSW",
		"VMULEUW",
		"VMULOUW",
		"VMULUWM",
		"VPMSUM",
		"VPMSUMB",
		"VPMSUMH",
		"VPMSUMW",
		"VPMSUMD",
		"VMSUMUDM",
		"VR",
		"VRLB",
		"VRLH",
		"VRLW",
		"VRLD",
		"VS",
		"VSLB",
		"VSLH",
		"VSLW",
		"VSL",
		"VSLO",
		"VSRB",
		"VSRH",
		"VSRW",
		"VSR",
		"VSRO",
		"VSLD",
		"VSRD",
		"VSA",
		"VSRAB",
		"VSRAH",
		"VSRAW",
		"VSRAD",
		"VSOI",
		"VSLDOI",
		"VCLZ",
		"VCLZB",
		"VCLZH",
		"VCLZW",
		"VCLZD",
		"VPOPCNT",
		"VPOPCNTB",
		"VPOPCNTH",
		"VPOPCNTW",
		"VPOPCNTD",
		"VCMPEQ",
		"VCMPEQUB",
		"VCMPEQUBCC",
		"VCMPEQUH",
		"VCMPEQUHCC",
		"VCMPEQUW",
		"VCMPEQUWCC",
		"VCMPEQUD",
		"VCMPEQUDCC",
		"VCMPGT",
		"VCMPGTUB",
		"VCMPGTUBCC",
		"VCMPGTUH",
		"VCMPGTUHCC",
		"VCMPGTUW",
		"VCMPGTUWCC",
		"VCMPGTUD",
		"VCMPGTUDCC",
		"VCMPGTSB",
		"VCMPGTSBCC",
		"VCMPGTSH",
		"VCMPGTSHCC",
		"VCMPGTSW",
		"VCMPGTSWCC",
		"VCMPGTSD",
		"VCMPGTSDCC",
		"VCMPNEZB",
		"VCMPNEZBCC",
		"VPERM",
		"VBPERMQ",
		"VBPERMD",
		"VSEL",
		"VSPLT",
		"VSPLTB",
		"VSPLTH",
		"VSPLTW",
		"VSPLTI",
		"VSPLTISB",
		"VSPLTISH",
		"VSPLTISW",
		"VCIPH",
		"VCIPHER",
		"VCIPHERLAST",
		"VNCIPH",
		"VNCIPHER",
		"VNCIPHERLAST",
		"VSBOX",
		"VSHASIGMA",
		"VSHASIGMAW",
		"VSHASIGMAD",
		"LXV",
		"LXVD2X",
		"LXVDSX",
		"LXVW4X",
		"STXV",
		"STXVD2X",
		"STXVW4X",
		"LXS",
		"LXSDX",
		"STXS",
		"STXSDX",
		"LXSI",
		"LXSIWAX",
		"LXSIWZX",
		"STXSI",
		"STXSIWX",
		"MFVSR",
		"MFVSRD",
		"MFFPRD",
		"MFVRD",
		"MFVSRWZ",
		"MFVSRLD",
		"MTVSR",
		"MTVSRD",
		"MTFPRD",
		"MTVRD",
		"MTVSRWA",
		"MTVSRWZ",
		"MTVSRDD",
		"MTVSRWS",
		"XXLAND",
		"XXLANDQ",
		"XXLANDC",
		"XXLEQV",
		"XXLNAND",
		"XXLOR",
		"XXLORC",
		"XXLNOR",
		"XXLORQ",
		"XXLXOR",
		"XXSEL",
		"XXMRG",
		"XXMRGHW",
		"XXMRGLW",
		"XXSPLT",
		"XXSPLTW",
		"XXPERM",
		"XXPERMDI",
		"XXSI",
		"XXSLDWI",
		"XSCV",
		"XSCVDPSP",
		"XSCVSPDP",
		"XSCVDPSPN",
		"XSCVSPDPN",
		"XVCV",
		"XVCVDPSP",
		"XVCVSPDP",
		"XSCVX",
		"XSCVDPSXDS",
		"XSCVDPSXWS",
		"XSCVDPUXDS",
		"XSCVDPUXWS",
		"XSCVXP",
		"XSCVSXDDP",
		"XSCVUXDDP",
		"XSCVSXDSP",
		"XSCVUXDSP",
		"XVCVX",
		"XVCVDPSXDS",
		"XVCVDPSXWS",
		"XVCVDPUXDS",
		"XVCVDPUXWS",
		"XVCVSPSXDS",
		"XVCVSPSXWS",
		"XVCVSPUXDS",
		"XVCVSPUXWS",
		"XVCVXP",
		"XVCVSXDDP",
		"XVCVSXWDP",
		"XVCVUXDDP",
		"XVCVUXWDP",
		"XVCVSXDSP",
		"XVCVSXWSP",
		"XVCVUXDSP",
		"XVCVUXWSP",
		"LAST",
	}
	pstate.cnames9 = []string{
		"NONE",
		"REG",
		"FREG",
		"VREG",
		"VSREG",
		"CREG",
		"SPR",
		"ZCON",
		"SCON",
		"UCON",
		"ADDCON",
		"ANDCON",
		"LCON",
		"DCON",
		"SACON",
		"SECON",
		"LACON",
		"LECON",
		"DACON",
		"SBRA",
		"LBRA",
		"SAUTO",
		"LAUTO",
		"SEXT",
		"LEXT",
		"ZOREG",
		"SOREG",
		"LOREG",
		"FPSCR",
		"MSR",
		"XER",
		"LR",
		"CTR",
		"ANY",
		"GOK",
		"ADDR",
		"GOTADDR",
		"TLS_LE",
		"TLS_IE",
		"TEXTSIZE",
		"NCLASS",
	}
	pstate.Linkppc64 = obj.LinkArch{
		Arch:           pstate.sys.ArchPPC64,
		Init:           pstate.buildop,
		Preprocess:     preprocess,
		Assemble:       pstate.span9,
		Progedit:       progedit,
		DWARFRegisters: pstate.PPC64DWARFRegisters,
	}
	pstate.Linkppc64le = obj.LinkArch{
		Arch:           pstate.sys.ArchPPC64LE,
		Init:           pstate.buildop,
		Preprocess:     preprocess,
		Assemble:       pstate.span9,
		Progedit:       progedit,
		DWARFRegisters: pstate.PPC64DWARFRegisters,
	}
	return pstate
}
