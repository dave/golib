package gc

import (
	"fmt"
	"github.com/dave/golib/src/cmd/compile/internal/types"
)

// AlgKind describes the kind of algorithms used for comparing and
// hashing a Type.
type AlgKind int

const (
	// These values are known by runtime.
	ANOEQ AlgKind = iota
	AMEM0
	AMEM8
	AMEM16
	AMEM32
	AMEM64
	AMEM128
	ASTRING
	AINTER
	ANILINTER
	AFLOAT32
	AFLOAT64
	ACPLX64
	ACPLX128

	// Type can be compared/hashed as regular memory.
	AMEM AlgKind = 100

	// Type needs special comparison/hashing functions.
	ASPECIAL AlgKind = -1
)

// IsComparable reports whether t is a comparable type.
func (psess *PackageSession) IsComparable(t *types.Type) bool {
	a, _ := psess.algtype1(t)
	return a != ANOEQ
}

// IsRegularMemory reports whether t can be compared/hashed as regular memory.
func (psess *PackageSession) IsRegularMemory(t *types.Type) bool {
	a, _ := psess.algtype1(t)
	return a == AMEM
}

// IncomparableField returns an incomparable Field of struct Type t, if any.
func (psess *PackageSession) IncomparableField(t *types.Type) *types.Field {
	for _, f := range t.FieldSlice(psess.types) {
		if !psess.IsComparable(f.Type) {
			return f
		}
	}
	return nil
}

// algtype is like algtype1, except it returns the fixed-width AMEMxx variants
// instead of the general AMEM kind when possible.
func (psess *PackageSession) algtype(t *types.Type) AlgKind {
	a, _ := psess.algtype1(t)
	if a == AMEM {
		switch t.Width {
		case 0:
			return AMEM0
		case 1:
			return AMEM8
		case 2:
			return AMEM16
		case 4:
			return AMEM32
		case 8:
			return AMEM64
		case 16:
			return AMEM128
		}
	}

	return a
}

// algtype1 returns the AlgKind used for comparing and hashing Type t.
// If it returns ANOEQ, it also returns the component type of t that
// makes it incomparable.
func (psess *PackageSession) algtype1(t *types.Type) (AlgKind, *types.Type) {
	if t.Broke() {
		return AMEM, nil
	}
	if t.Noalg() {
		return ANOEQ, t
	}

	switch t.Etype {
	case TANY, TFORW:

		return ANOEQ, t

	case TINT8, TUINT8, TINT16, TUINT16,
		TINT32, TUINT32, TINT64, TUINT64,
		TINT, TUINT, TUINTPTR,
		TBOOL, TPTR32, TPTR64,
		TCHAN, TUNSAFEPTR:
		return AMEM, nil

	case TFUNC, TMAP:
		return ANOEQ, t

	case TFLOAT32:
		return AFLOAT32, nil

	case TFLOAT64:
		return AFLOAT64, nil

	case TCOMPLEX64:
		return ACPLX64, nil

	case TCOMPLEX128:
		return ACPLX128, nil

	case TSTRING:
		return ASTRING, nil

	case TINTER:
		if t.IsEmptyInterface(psess.types) {
			return ANILINTER, nil
		}
		return AINTER, nil

	case TSLICE:
		return ANOEQ, t

	case TARRAY:
		a, bad := psess.algtype1(t.Elem(psess.types))
		switch a {
		case AMEM:
			return AMEM, nil
		case ANOEQ:
			return ANOEQ, bad
		}

		switch t.NumElem(psess.types) {
		case 0:

			return AMEM, nil
		case 1:

			return a, nil
		}

		return ASPECIAL, nil

	case TSTRUCT:
		fields := t.FieldSlice(psess.types)

		if len(fields) == 1 && !fields[0].Sym.IsBlank() {
			return psess.algtype1(fields[0].Type)
		}

		ret := AMEM
		for i, f := range fields {

			a, bad := psess.algtype1(f.Type)
			if a == ANOEQ {
				return ANOEQ, bad
			}

			if a != AMEM || f.Sym.IsBlank() || psess.ispaddedfield(t, i) {
				ret = ASPECIAL
			}
		}

		return ret, nil
	}
	psess.
		Fatalf("algtype1: unexpected type %v", t)
	return 0, nil
}

// Generate a helper function to compute the hash of a value of type t.
func (psess *PackageSession) genhash(sym *types.Sym, t *types.Type) {
	if psess.Debug['r'] != 0 {
		fmt.Printf("genhash %v %v\n", sym, t)
	}
	psess.
		lineno = psess.autogeneratedPos
	psess.
		dclcontext = PEXTERN

	tfn := psess.nod(OTFUNC, nil, nil)
	tfn.List.Set2(psess.
		namedfield("p", psess.types.NewPtr(t)), psess.
		namedfield("h", psess.types.Types[TUINTPTR]),
	)
	tfn.Rlist.Set1(psess.anonfield(psess.types.Types[TUINTPTR]))

	fn := psess.dclfunc(sym, tfn)
	np := asNode(tfn.Type.Params(psess.types).Field(psess.types, 0).Nname)
	nh := asNode(tfn.Type.Params(psess.types).Field(psess.types, 1).Nname)

	switch t.Etype {
	default:
		psess.
			Fatalf("genhash %v", t)

	case types.TARRAY:

		hashel := psess.hashfor(t.Elem(psess.types))

		n := psess.nod(ORANGE, nil, psess.nod(OIND, np, nil))
		ni := psess.newname(psess.lookup("i"))
		ni.Type = psess.types.Types[TINT]
		n.List.Set1(ni)
		n.SetColas(true)
		psess.
			colasdefn(n.List.Slice(), n)
		ni = n.List.First()

		call := psess.nod(OCALL, hashel, nil)

		nx := psess.nod(OINDEX, np, ni)
		nx.SetBounded(true)
		na := psess.nod(OADDR, nx, nil)
		call.List.Append(na)
		call.List.Append(nh)
		n.Nbody.Append(psess.nod(OAS, nh, call))

		fn.Nbody.Append(n)

	case types.TSTRUCT:

		for i, fields := 0, t.FieldSlice(psess.types); i < len(fields); {
			f := fields[i]

			if f.Sym.IsBlank() {
				i++
				continue
			}

			if !psess.IsRegularMemory(f.Type) {
				hashel := psess.hashfor(f.Type)
				call := psess.nod(OCALL, hashel, nil)
				nx := psess.nodSym(OXDOT, np, f.Sym)
				na := psess.nod(OADDR, nx, nil)
				call.List.Append(na)
				call.List.Append(nh)
				fn.Nbody.Append(psess.nod(OAS, nh, call))
				i++
				continue
			}

			size, next := psess.memrun(t, i)

			hashel := psess.hashmem(f.Type)
			call := psess.nod(OCALL, hashel, nil)
			nx := psess.nodSym(OXDOT, np, f.Sym)
			na := psess.nod(OADDR, nx, nil)
			call.List.Append(na)
			call.List.Append(nh)
			call.List.Append(psess.nodintconst(size))
			fn.Nbody.Append(psess.nod(OAS, nh, call))

			i = next
		}
	}

	r := psess.nod(ORETURN, nil, nil)
	r.List.Append(nh)
	fn.Nbody.Append(r)

	if psess.Debug['r'] != 0 {
		dumplist("genhash body", fn.Nbody)
	}
	psess.
		funcbody()

	fn.Func.SetDupok(true)
	fn = psess.typecheck(fn, Etop)
	psess.
		Curfn = fn
	psess.
		typecheckslice(fn.Nbody.Slice(), Etop)
	psess.
		Curfn = nil

	if psess.debug_dclstack != 0 {
		psess.
			testdclstack()
	}

	old_safemode := psess.safemode
	psess.
		safemode = false

	fn.Func.SetNilCheckDisabled(true)
	psess.
		funccompile(fn)
	psess.
		safemode = old_safemode
}

func (psess *PackageSession) hashfor(t *types.Type) *Node {
	var sym *types.Sym

	switch a, _ := psess.algtype1(t); a {
	case AMEM:
		psess.
			Fatalf("hashfor with AMEM type")
	case AINTER:
		sym = psess.Runtimepkg.Lookup(psess.types, "interhash")
	case ANILINTER:
		sym = psess.Runtimepkg.Lookup(psess.types, "nilinterhash")
	case ASTRING:
		sym = psess.Runtimepkg.Lookup(psess.types, "strhash")
	case AFLOAT32:
		sym = psess.Runtimepkg.Lookup(psess.types, "f32hash")
	case AFLOAT64:
		sym = psess.Runtimepkg.Lookup(psess.types, "f64hash")
	case ACPLX64:
		sym = psess.Runtimepkg.Lookup(psess.types, "c64hash")
	case ACPLX128:
		sym = psess.Runtimepkg.Lookup(psess.types, "c128hash")
	default:
		sym = psess.typesymprefix(".hash", t)
	}

	n := psess.newname(sym)
	n.SetClass(PFUNC)
	n.Type = psess.functype(nil, []*Node{psess.
		anonfield(psess.types.NewPtr(t)), psess.
		anonfield(psess.types.Types[TUINTPTR]),
	}, []*Node{psess.
		anonfield(psess.types.Types[TUINTPTR]),
	})
	return n
}

// geneq generates a helper function to
// check equality of two values of type t.
func (psess *PackageSession) geneq(sym *types.Sym, t *types.Type) {
	if psess.Debug['r'] != 0 {
		fmt.Printf("geneq %v %v\n", sym, t)
	}
	psess.
		lineno = psess.autogeneratedPos
	psess.
		dclcontext = PEXTERN

	tfn := psess.nod(OTFUNC, nil, nil)
	tfn.List.Set2(psess.
		namedfield("p", psess.types.NewPtr(t)), psess.
		namedfield("q", psess.types.NewPtr(t)),
	)
	tfn.Rlist.Set1(psess.anonfield(psess.types.Types[TBOOL]))

	fn := psess.dclfunc(sym, tfn)
	np := asNode(tfn.Type.Params(psess.types).Field(psess.types, 0).Nname)
	nq := asNode(tfn.Type.Params(psess.types).Field(psess.types, 1).Nname)

	switch t.Etype {
	default:
		psess.
			Fatalf("geneq %v", t)

	case TARRAY:

		nrange := psess.nod(ORANGE, nil, psess.nod(OIND, np, nil))

		ni := psess.newname(psess.lookup("i"))
		ni.Type = psess.types.Types[TINT]
		nrange.List.Set1(ni)
		nrange.SetColas(true)
		psess.
			colasdefn(nrange.List.Slice(), nrange)
		ni = nrange.List.First()

		nx := psess.nod(OINDEX, np, ni)

		nx.SetBounded(true)
		ny := psess.nod(OINDEX, nq, ni)
		ny.SetBounded(true)

		nif := psess.nod(OIF, nil, nil)
		nif.Left = psess.nod(ONE, nx, ny)
		r := psess.nod(ORETURN, nil, nil)
		r.List.Append(psess.nodbool(false))
		nif.Nbody.Append(r)
		nrange.Nbody.Append(nif)
		fn.Nbody.Append(nrange)

		ret := psess.nod(ORETURN, nil, nil)
		ret.List.Append(psess.nodbool(true))
		fn.Nbody.Append(ret)

	case TSTRUCT:
		var cond *Node
		and := func(n *Node) {
			if cond == nil {
				cond = n
				return
			}
			cond = psess.nod(OANDAND, cond, n)
		}

		for i, fields := 0, t.FieldSlice(psess.types); i < len(fields); {
			f := fields[i]

			if f.Sym.IsBlank() {
				i++
				continue
			}

			if !psess.IsRegularMemory(f.Type) {
				and(psess.eqfield(np, nq, f.Sym))
				i++
				continue
			}

			size, next := psess.memrun(t, i)

			if s := fields[i:next]; len(s) <= 2 {

				for _, f := range s {
					and(psess.eqfield(np, nq, f.Sym))
				}
			} else {

				and(psess.eqmem(np, nq, f.Sym, size))
			}
			i = next
		}

		if cond == nil {
			cond = psess.nodbool(true)
		}

		ret := psess.nod(ORETURN, nil, nil)
		ret.List.Append(cond)
		fn.Nbody.Append(ret)
	}

	if psess.Debug['r'] != 0 {
		dumplist("geneq body", fn.Nbody)
	}
	psess.
		funcbody()

	fn.Func.SetDupok(true)
	fn = psess.typecheck(fn, Etop)
	psess.
		Curfn = fn
	psess.
		typecheckslice(fn.Nbody.Slice(), Etop)
	psess.
		Curfn = nil

	if psess.debug_dclstack != 0 {
		psess.
			testdclstack()
	}

	old_safemode := psess.safemode
	psess.
		safemode = false

	fn.Func.SetNilCheckDisabled(true)
	psess.
		funccompile(fn)
	psess.
		safemode = old_safemode
}

// eqfield returns the node
// 	p.field == q.field
func (psess *PackageSession) eqfield(p *Node, q *Node, field *types.Sym) *Node {
	nx := psess.nodSym(OXDOT, p, field)
	ny := psess.nodSym(OXDOT, q, field)
	ne := psess.nod(OEQ, nx, ny)
	return ne
}

// eqmem returns the node
// 	memequal(&p.field, &q.field [, size])
func (psess *PackageSession) eqmem(p *Node, q *Node, field *types.Sym, size int64) *Node {
	nx := psess.nod(OADDR, psess.nodSym(OXDOT, p, field), nil)
	ny := psess.nod(OADDR, psess.nodSym(OXDOT, q, field), nil)
	nx = psess.typecheck(nx, Erv)
	ny = psess.typecheck(ny, Erv)

	fn, needsize := psess.eqmemfunc(size, nx.Type.Elem(psess.types))
	call := psess.nod(OCALL, fn, nil)
	call.List.Append(nx)
	call.List.Append(ny)
	if needsize {
		call.List.Append(psess.nodintconst(size))
	}

	return call
}

func (psess *PackageSession) eqmemfunc(size int64, t *types.Type) (fn *Node, needsize bool) {
	switch size {
	default:
		fn = psess.syslook("memequal")
		needsize = true
	case 1, 2, 4, 8, 16:
		buf := fmt.Sprintf("memequal%d", int(size)*8)
		fn = psess.syslook(buf)
	}

	fn = psess.substArgTypes(fn, t, t)
	return fn, needsize
}

// memrun finds runs of struct fields for which memory-only algs are appropriate.
// t is the parent struct type, and start is the field index at which to start the run.
// size is the length in bytes of the memory included in the run.
// next is the index just after the end of the memory run.
func (psess *PackageSession) memrun(t *types.Type, start int) (size int64, next int) {
	next = start
	for {
		next++
		if next == t.NumFields(psess.types) {
			break
		}

		if psess.ispaddedfield(t, next-1) {
			break
		}

		if f := t.Field(psess.types, next); f.Sym.IsBlank() || !psess.IsRegularMemory(f.Type) {
			break
		}
	}
	return t.Field(psess.types, next-1).End() - t.Field(psess.types, start).Offset, next
}

// ispaddedfield reports whether the i'th field of struct type t is followed
// by padding.
func (psess *PackageSession) ispaddedfield(t *types.Type, i int) bool {
	if !t.IsStruct() {
		psess.
			Fatalf("ispaddedfield called non-struct %v", t)
	}
	end := t.Width
	if i+1 < t.NumFields(psess.types) {
		end = t.Field(psess.types, i+1).Offset
	}
	return t.Field(psess.types, i).End() != end
}
