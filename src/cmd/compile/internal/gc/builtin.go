// Code generated by mkbuiltin.go. DO NOT EDIT.

package gc

import "github.com/dave/golib/src/cmd/compile/internal/types"

func (pstate *PackageState) runtimeTypes() []*types.Type {
	var typs [113]*types.Type
	typs[0] = pstate.types.Bytetype
	typs[1] = pstate.types.NewPtr(typs[0])
	typs[2] = pstate.types.Types[TANY]
	typs[3] = pstate.types.NewPtr(typs[2])
	typs[4] = pstate.functype(nil, []*Node{pstate.anonfield(typs[1])}, []*Node{pstate.anonfield(typs[3])})
	typs[5] = pstate.functype(nil, nil, nil)
	typs[6] = pstate.types.Types[TINTER]
	typs[7] = pstate.functype(nil, []*Node{pstate.anonfield(typs[6])}, nil)
	typs[8] = pstate.types.Types[TINT32]
	typs[9] = pstate.types.NewPtr(typs[8])
	typs[10] = pstate.functype(nil, []*Node{pstate.anonfield(typs[9])}, []*Node{pstate.anonfield(typs[6])})
	typs[11] = pstate.types.Types[TBOOL]
	typs[12] = pstate.functype(nil, []*Node{pstate.anonfield(typs[11])}, nil)
	typs[13] = pstate.types.Types[TFLOAT64]
	typs[14] = pstate.functype(nil, []*Node{pstate.anonfield(typs[13])}, nil)
	typs[15] = pstate.types.Types[TINT64]
	typs[16] = pstate.functype(nil, []*Node{pstate.anonfield(typs[15])}, nil)
	typs[17] = pstate.types.Types[TUINT64]
	typs[18] = pstate.functype(nil, []*Node{pstate.anonfield(typs[17])}, nil)
	typs[19] = pstate.types.Types[TCOMPLEX128]
	typs[20] = pstate.functype(nil, []*Node{pstate.anonfield(typs[19])}, nil)
	typs[21] = pstate.types.Types[TSTRING]
	typs[22] = pstate.functype(nil, []*Node{pstate.anonfield(typs[21])}, nil)
	typs[23] = pstate.functype(nil, []*Node{pstate.anonfield(typs[2])}, nil)
	typs[24] = pstate.types.NewArray(typs[0], 32)
	typs[25] = pstate.types.NewPtr(typs[24])
	typs[26] = pstate.functype(nil, []*Node{pstate.anonfield(typs[25]), pstate.anonfield(typs[21]), pstate.anonfield(typs[21])}, []*Node{pstate.anonfield(typs[21])})
	typs[27] = pstate.functype(nil, []*Node{pstate.anonfield(typs[25]), pstate.anonfield(typs[21]), pstate.anonfield(typs[21]), pstate.anonfield(typs[21])}, []*Node{pstate.anonfield(typs[21])})
	typs[28] = pstate.functype(nil, []*Node{pstate.anonfield(typs[25]), pstate.anonfield(typs[21]), pstate.anonfield(typs[21]), pstate.anonfield(typs[21]), pstate.anonfield(typs[21])}, []*Node{pstate.anonfield(typs[21])})
	typs[29] = pstate.functype(nil, []*Node{pstate.anonfield(typs[25]), pstate.anonfield(typs[21]), pstate.anonfield(typs[21]), pstate.anonfield(typs[21]), pstate.anonfield(typs[21]), pstate.anonfield(typs[21])}, []*Node{pstate.anonfield(typs[21])})
	typs[30] = pstate.types.NewSlice(typs[21])
	typs[31] = pstate.functype(nil, []*Node{pstate.anonfield(typs[25]), pstate.anonfield(typs[30])}, []*Node{pstate.anonfield(typs[21])})
	typs[32] = pstate.types.Types[TINT]
	typs[33] = pstate.functype(nil, []*Node{pstate.anonfield(typs[21]), pstate.anonfield(typs[21])}, []*Node{pstate.anonfield(typs[32])})
	typs[34] = pstate.types.NewArray(typs[0], 4)
	typs[35] = pstate.types.NewPtr(typs[34])
	typs[36] = pstate.functype(nil, []*Node{pstate.anonfield(typs[35]), pstate.anonfield(typs[15])}, []*Node{pstate.anonfield(typs[21])})
	typs[37] = pstate.types.NewSlice(typs[0])
	typs[38] = pstate.functype(nil, []*Node{pstate.anonfield(typs[25]), pstate.anonfield(typs[37])}, []*Node{pstate.anonfield(typs[21])})
	typs[39] = pstate.functype(nil, []*Node{pstate.anonfield(typs[37])}, []*Node{pstate.anonfield(typs[21])})
	typs[40] = pstate.types.Runetype
	typs[41] = pstate.types.NewSlice(typs[40])
	typs[42] = pstate.functype(nil, []*Node{pstate.anonfield(typs[25]), pstate.anonfield(typs[41])}, []*Node{pstate.anonfield(typs[21])})
	typs[43] = pstate.functype(nil, []*Node{pstate.anonfield(typs[25]), pstate.anonfield(typs[21])}, []*Node{pstate.anonfield(typs[37])})
	typs[44] = pstate.types.NewArray(typs[40], 32)
	typs[45] = pstate.types.NewPtr(typs[44])
	typs[46] = pstate.functype(nil, []*Node{pstate.anonfield(typs[45]), pstate.anonfield(typs[21])}, []*Node{pstate.anonfield(typs[41])})
	typs[47] = pstate.types.Types[TUINTPTR]
	typs[48] = pstate.functype(nil, []*Node{pstate.anonfield(typs[2]), pstate.anonfield(typs[2]), pstate.anonfield(typs[47])}, []*Node{pstate.anonfield(typs[32])})
	typs[49] = pstate.functype(nil, []*Node{pstate.anonfield(typs[2]), pstate.anonfield(typs[2])}, []*Node{pstate.anonfield(typs[32])})
	typs[50] = pstate.functype(nil, []*Node{pstate.anonfield(typs[21]), pstate.anonfield(typs[32])}, []*Node{pstate.anonfield(typs[40]), pstate.anonfield(typs[32])})
	typs[51] = pstate.functype(nil, []*Node{pstate.anonfield(typs[21])}, []*Node{pstate.anonfield(typs[32])})
	typs[52] = pstate.functype(nil, []*Node{pstate.anonfield(typs[1]), pstate.anonfield(typs[2])}, []*Node{pstate.anonfield(typs[2])})
	typs[53] = pstate.functype(nil, []*Node{pstate.anonfield(typs[1]), pstate.anonfield(typs[3])}, []*Node{pstate.anonfield(typs[2])})
	typs[54] = pstate.functype(nil, []*Node{pstate.anonfield(typs[1]), pstate.anonfield(typs[2])}, []*Node{pstate.anonfield(typs[2]), pstate.anonfield(typs[11])})
	typs[55] = pstate.functype(nil, []*Node{pstate.anonfield(typs[1]), pstate.anonfield(typs[1]), pstate.anonfield(typs[1])}, nil)
	typs[56] = pstate.functype(nil, []*Node{pstate.anonfield(typs[1])}, nil)
	typs[57] = pstate.types.NewPtr(typs[47])
	typs[58] = pstate.types.Types[TUNSAFEPTR]
	typs[59] = pstate.functype(nil, []*Node{pstate.anonfield(typs[57]), pstate.anonfield(typs[58]), pstate.anonfield(typs[58])}, []*Node{pstate.anonfield(typs[11])})
	typs[60] = pstate.types.Types[TUINT32]
	typs[61] = pstate.functype(nil, nil, []*Node{pstate.anonfield(typs[60])})
	typs[62] = pstate.types.NewMap(typs[2], typs[2])
	typs[63] = pstate.functype(nil, []*Node{pstate.anonfield(typs[1]), pstate.anonfield(typs[15]), pstate.anonfield(typs[3])}, []*Node{pstate.anonfield(typs[62])})
	typs[64] = pstate.functype(nil, []*Node{pstate.anonfield(typs[1]), pstate.anonfield(typs[32]), pstate.anonfield(typs[3])}, []*Node{pstate.anonfield(typs[62])})
	typs[65] = pstate.functype(nil, nil, []*Node{pstate.anonfield(typs[62])})
	typs[66] = pstate.functype(nil, []*Node{pstate.anonfield(typs[1]), pstate.anonfield(typs[62]), pstate.anonfield(typs[3])}, []*Node{pstate.anonfield(typs[3])})
	typs[67] = pstate.functype(nil, []*Node{pstate.anonfield(typs[1]), pstate.anonfield(typs[62]), pstate.anonfield(typs[2])}, []*Node{pstate.anonfield(typs[3])})
	typs[68] = pstate.functype(nil, []*Node{pstate.anonfield(typs[1]), pstate.anonfield(typs[62]), pstate.anonfield(typs[3]), pstate.anonfield(typs[1])}, []*Node{pstate.anonfield(typs[3])})
	typs[69] = pstate.functype(nil, []*Node{pstate.anonfield(typs[1]), pstate.anonfield(typs[62]), pstate.anonfield(typs[3])}, []*Node{pstate.anonfield(typs[3]), pstate.anonfield(typs[11])})
	typs[70] = pstate.functype(nil, []*Node{pstate.anonfield(typs[1]), pstate.anonfield(typs[62]), pstate.anonfield(typs[2])}, []*Node{pstate.anonfield(typs[3]), pstate.anonfield(typs[11])})
	typs[71] = pstate.functype(nil, []*Node{pstate.anonfield(typs[1]), pstate.anonfield(typs[62]), pstate.anonfield(typs[3]), pstate.anonfield(typs[1])}, []*Node{pstate.anonfield(typs[3]), pstate.anonfield(typs[11])})
	typs[72] = pstate.functype(nil, []*Node{pstate.anonfield(typs[1]), pstate.anonfield(typs[62]), pstate.anonfield(typs[3])}, nil)
	typs[73] = pstate.functype(nil, []*Node{pstate.anonfield(typs[1]), pstate.anonfield(typs[62]), pstate.anonfield(typs[2])}, nil)
	typs[74] = pstate.functype(nil, []*Node{pstate.anonfield(typs[3])}, nil)
	typs[75] = pstate.functype(nil, []*Node{pstate.anonfield(typs[1]), pstate.anonfield(typs[62])}, nil)
	typs[76] = pstate.types.NewChan(typs[2], types.Cboth)
	typs[77] = pstate.functype(nil, []*Node{pstate.anonfield(typs[1]), pstate.anonfield(typs[15])}, []*Node{pstate.anonfield(typs[76])})
	typs[78] = pstate.functype(nil, []*Node{pstate.anonfield(typs[1]), pstate.anonfield(typs[32])}, []*Node{pstate.anonfield(typs[76])})
	typs[79] = pstate.types.NewChan(typs[2], types.Crecv)
	typs[80] = pstate.functype(nil, []*Node{pstate.anonfield(typs[79]), pstate.anonfield(typs[3])}, nil)
	typs[81] = pstate.functype(nil, []*Node{pstate.anonfield(typs[79]), pstate.anonfield(typs[3])}, []*Node{pstate.anonfield(typs[11])})
	typs[82] = pstate.types.NewChan(typs[2], types.Csend)
	typs[83] = pstate.functype(nil, []*Node{pstate.anonfield(typs[82]), pstate.anonfield(typs[3])}, nil)
	typs[84] = pstate.types.NewArray(typs[0], 3)
	typs[85] = pstate.tostruct([]*Node{pstate.namedfield("enabled", typs[11]), pstate.namedfield("pad", typs[84]), pstate.namedfield("needed", typs[11]), pstate.namedfield("cgo", typs[11]), pstate.namedfield("alignme", typs[17])})
	typs[86] = pstate.functype(nil, []*Node{pstate.anonfield(typs[1]), pstate.anonfield(typs[3]), pstate.anonfield(typs[3])}, nil)
	typs[87] = pstate.functype(nil, []*Node{pstate.anonfield(typs[1]), pstate.anonfield(typs[3])}, nil)
	typs[88] = pstate.functype(nil, []*Node{pstate.anonfield(typs[1]), pstate.anonfield(typs[2]), pstate.anonfield(typs[2])}, []*Node{pstate.anonfield(typs[32])})
	typs[89] = pstate.functype(nil, []*Node{pstate.anonfield(typs[82]), pstate.anonfield(typs[3])}, []*Node{pstate.anonfield(typs[11])})
	typs[90] = pstate.functype(nil, []*Node{pstate.anonfield(typs[3]), pstate.anonfield(typs[79])}, []*Node{pstate.anonfield(typs[11])})
	typs[91] = pstate.types.NewPtr(typs[11])
	typs[92] = pstate.functype(nil, []*Node{pstate.anonfield(typs[3]), pstate.anonfield(typs[91]), pstate.anonfield(typs[79])}, []*Node{pstate.anonfield(typs[11])})
	typs[93] = pstate.functype(nil, []*Node{pstate.anonfield(typs[1]), pstate.anonfield(typs[1]), pstate.anonfield(typs[32])}, []*Node{pstate.anonfield(typs[32]), pstate.anonfield(typs[11])})
	typs[94] = pstate.types.NewSlice(typs[2])
	typs[95] = pstate.functype(nil, []*Node{pstate.anonfield(typs[1]), pstate.anonfield(typs[32]), pstate.anonfield(typs[32])}, []*Node{pstate.anonfield(typs[94])})
	typs[96] = pstate.functype(nil, []*Node{pstate.anonfield(typs[1]), pstate.anonfield(typs[15]), pstate.anonfield(typs[15])}, []*Node{pstate.anonfield(typs[94])})
	typs[97] = pstate.functype(nil, []*Node{pstate.anonfield(typs[1]), pstate.anonfield(typs[94]), pstate.anonfield(typs[32])}, []*Node{pstate.anonfield(typs[94])})
	typs[98] = pstate.functype(nil, []*Node{pstate.anonfield(typs[3]), pstate.anonfield(typs[3]), pstate.anonfield(typs[47])}, nil)
	typs[99] = pstate.functype(nil, []*Node{pstate.anonfield(typs[58]), pstate.anonfield(typs[47])}, nil)
	typs[100] = pstate.functype(nil, []*Node{pstate.anonfield(typs[3]), pstate.anonfield(typs[3]), pstate.anonfield(typs[47])}, []*Node{pstate.anonfield(typs[11])})
	typs[101] = pstate.functype(nil, []*Node{pstate.anonfield(typs[3]), pstate.anonfield(typs[3])}, []*Node{pstate.anonfield(typs[11])})
	typs[102] = pstate.functype(nil, []*Node{pstate.anonfield(typs[15]), pstate.anonfield(typs[15])}, []*Node{pstate.anonfield(typs[15])})
	typs[103] = pstate.functype(nil, []*Node{pstate.anonfield(typs[17]), pstate.anonfield(typs[17])}, []*Node{pstate.anonfield(typs[17])})
	typs[104] = pstate.functype(nil, []*Node{pstate.anonfield(typs[13])}, []*Node{pstate.anonfield(typs[15])})
	typs[105] = pstate.functype(nil, []*Node{pstate.anonfield(typs[13])}, []*Node{pstate.anonfield(typs[17])})
	typs[106] = pstate.functype(nil, []*Node{pstate.anonfield(typs[13])}, []*Node{pstate.anonfield(typs[60])})
	typs[107] = pstate.functype(nil, []*Node{pstate.anonfield(typs[15])}, []*Node{pstate.anonfield(typs[13])})
	typs[108] = pstate.functype(nil, []*Node{pstate.anonfield(typs[17])}, []*Node{pstate.anonfield(typs[13])})
	typs[109] = pstate.functype(nil, []*Node{pstate.anonfield(typs[60])}, []*Node{pstate.anonfield(typs[13])})
	typs[110] = pstate.functype(nil, []*Node{pstate.anonfield(typs[19]), pstate.anonfield(typs[19])}, []*Node{pstate.anonfield(typs[19])})
	typs[111] = pstate.functype(nil, []*Node{pstate.anonfield(typs[47])}, nil)
	typs[112] = pstate.functype(nil, []*Node{pstate.anonfield(typs[47]), pstate.anonfield(typs[47])}, nil)
	return typs[:]
}
