package gc

import (
	"github.com/dave/golib/src/cmd/compile/internal/ssa"
	"github.com/dave/golib/src/cmd/compile/internal/syntax"
	"github.com/dave/golib/src/cmd/compile/internal/types"
	"github.com/dave/golib/src/cmd/internal/bio"
	"github.com/dave/golib/src/cmd/internal/dwarf"
	"github.com/dave/golib/src/cmd/internal/gcprog"
	"github.com/dave/golib/src/cmd/internal/obj"
	"github.com/dave/golib/src/cmd/internal/objabi"
	"github.com/dave/golib/src/cmd/internal/src"
	"github.com/dave/golib/src/cmd/internal/sys"
)

type PackageSession struct {
	bio    *bio.PackageSession
	dwarf  *dwarf.PackageSession
	gcprog *gcprog.PackageSession
	obj    *obj.PackageSession
	objabi *objabi.PackageSession
	src    *src.PackageSession
	ssa    *ssa.PackageSession
	syntax *syntax.PackageSession
	sys    *sys.PackageSession
	types  *types.PackageSession

	ControlWord64trunc,
	ControlWord32 *obj.LSym
	Ctxt         *obj.Link
	Curfn        *Node
	Debug        [256]int
	Debug_append int
	Debug_asm    bool

	Debug_checknil     int
	Debug_closure      int
	Debug_compilelater int
	Debug_export       int

	Debug_gcprog       int
	Debug_gendwarfinl  int
	Debug_locationlist int
	Debug_panic        int

	Debug_pctab string
	Debug_slice int

	Debug_softfloat int

	Debug_typeassert   int
	Debug_typecheckinl int
	Debug_vlog         bool
	Debug_wb           int

	LivenessInvalid LivenessIndex

	Nacl       bool
	Runtimepkg *types.Pkg

	WasmMove,
	WasmZero,
	WasmDiv,
	WasmTruncS,
	WasmTruncU,
	SigPanic *obj.LSym
	Widthptr int

	Widthreg     int
	_Class_index [9]uint8
	_Op_index    [153]uint16

	_typekind []string

	algarray *obj.LSym

	allowedStdPragmas map[string]bool
	array_array       int

	array_cap int
	array_nel int

	asmhdr  string
	asmlist []*Node

	assertE2I,
	assertE2I2,
	assertI2I,
	assertI2I2,
	Deferproc,
	Deferreturn,
	Duffcopy,
	Duffzero,
	gcWriteBarrier,
	goschedguarded,
	growslice,
	msanread,
	msanwrite,
	Newproc,
	panicdivide,
	panicdottypeE,
	panicdottypeI,
	panicindex,
	panicnildottype,
	panicslice,
	raceread,
	racereadrange,
	racewrite,
	racewriterange,
	supportPopcnt,
	supportSSE41,
	arm64SupportAtomics,
	typedmemclr,
	typedmemmove,
	Udiv,
	writeBarrier *obj.LSym
	atExitFuncs []func()

	autogeneratedPos src.XPos
	basicTypes       [14]struct {
		name  string
		etype types.EType
	}

	basicnames []string
	benchfile  string

	binOps       [23]Op
	blockprofile string
	buildid      string

	builtinFuncs [15]struct {
		name string
		op   Op
	}
	builtinpkg *types.Pkg

	capVar              Node
	capturevarscomplete bool
	compilequeue        []*Node

	compiling_runtime bool

	compiling_std bool

	compiling_wrappers bool

	concurrentFlagOK [256]bool
	cpuprofile       string

	dclcontext     Class
	debug_dclstack int

	debuglive int
	debugstr  string
	debugtab  []struct {
		name string
		help string
		val  interface {
		}
	}
	declImporter map[*types.Sym]iimporterAndOffset

	declare_typegen int

	decldepth int32
	defercalc int

	deferredTypeStack []*types.Type
	disable_checknil  int

	dnameCount int
	dolinkobj  bool

	dotField map[typeSymKey]*types.Field
	dotlist  []Dlist

	dumpdepth int
	errors    []Error

	exportlist []*Node
	externdcl  []*Node

	f32_u32 f2uCvtTab
	f32_u64 f2uCvtTab

	f64_u32            f2uCvtTab
	f64_u64            f2uCvtTab
	flagDWARF          bool
	flag_installsuffix string

	flag_msan   bool
	flag_race   bool
	flagiexport bool

	fpConvOpToSSA map[twoTypes]twoOpsAndType

	fpConvOpToSSA32 map[twoTypes]twoOpsAndType
	funcstack       []*Node
	funcsyms        []*types.Sym
	funcsymsmu      sync.Mutex

	genDwarfInline int
	globClosgen    int

	goopnames []string

	gopkg *types.Pkg

	idirs           []string
	importMap       map[string]string
	imported_unsafe bool

	importlist []*Node
	inimport   bool
	initlist   []*Node
	initplans  map[*Node]*InitPlan
	inittemps  map[*Node]*Node

	inlgen         int
	inlineImporter map[*types.Sym]iimporterAndOffset

	instrumenting bool

	intrinsics map[intrinsicKey]intrinsicBuilder
	isComplex  [38]bool
	isFloat    [38]bool
	isInt      [38]bool

	iscmp  [151]bool
	isforw [38]bool

	issimple [38]bool
	itable   *types.Type

	itablinkpkg *types.Pkg
	itabpkg     *types.Pkg
	itabs       []itabEntry

	keepAlive func(interface {
	})

	kinds              []int
	largeStackFrames   []src.XPos
	largeStackFramesMu sync.Mutex

	lasterror struct {
		syntax src.XPos
		other  src.XPos
		msg    string
	}

	lenVar Node
	lineno src.XPos

	linkobj string

	localimport string
	localpkg    *types.Pkg

	looping Node

	mapaccess1 mapnames
	mapaccess2 mapnames
	mapassign  mapnames
	mapdelete  mapnames
	mappkg     *types.Pkg

	mapqueue  []*Node
	maxfltval [38]*Mpflt
	maxintval [38]*Mpint

	memVar Node

	memequalvarlen *obj.LSym
	memhashvarlen  *obj.LSym
	memprofile     string
	memprofilerate int64

	minfltval    [38]*Mpflt
	minintval    [38]*Mpint
	msanpkg      *types.Pkg
	mutexprofile string

	myheight        int
	myimportpath    string
	nBackendWorkers int

	nblank  *Node
	nerrors int

	newlenVar      Node
	nodfp          *Node
	nolocalimports bool

	nonlooping       Node
	norace_inst_pkgs []string

	nowritebarrierrecCheck *nowritebarrierrecChecker
	nsavederrors           int

	nsyntaxerrors int

	numImport map[string]int

	okVar    Node
	okfor    [151][]bool
	okforadd [38]bool
	okforand [38]bool

	okforarith [38]bool
	okforbool  [38]bool
	okforcap   [38]bool
	okforcmp   [38]bool

	okforconst [38]bool
	okforeq    [38]bool

	okforlen  [38]bool
	okfornone [38]bool
	omit_pkgs []string

	opToSSA map[opAndType]ssa.Op
	opprec  []int
	outfile string

	packageFile map[string]string
	pathPrefix  string
	pragcgobuf  [][]string

	prealloc map[*Node]*Node

	predecl []*types.Type
	ptabs   []ptabEntry

	ptrVar        Node
	pure_go       bool
	racepkg       *types.Pkg
	renameinitgen int

	reservedimports []string
	runtimeDecls    [142]struct {
		name string
		tag  int
		typ  int
	}

	safemode bool

	scase           *types.Type
	sharedProgArray *[10000]obj.Prog

	shiftOpToSSA map[opAndTwoTypes]ssa.Op
	signatset    map[*types.Type]struct {
	}
	signatsetmu sync.Mutex

	simtype                 [38]types.EType
	sizeCalculationDisabled bool

	sizeof_Array int

	sizeof_String int

	slicebytes_gen int

	slist []Symlink

	softFloatOps map[ssa.Op]sfRtCallDef
	ssaCaches    []ssa.Cache
	ssaConfig    *ssa.Config

	staticbytes,
	zerobase *Node

	statuniqgen int

	tagString    [27]string
	tags         [128]string
	thearch      Arch
	timings      Timings
	traceHandler func(string)
	traceprofile string

	trackScopes bool
	trackpkg    *types.Pkg

	typVar            Node
	typecheck_tcstack []*Node
	typecheckdefstack []*Node

	typecheckok bool
	typedefs    [3]struct {
		name     string
		etype    types.EType
		sameas32 types.EType
		sameas64 types.EType
	}

	typepkg   *types.Pkg
	typepkgmu sync.Mutex

	u32_f32             u322fcvtTab
	u32_f64             u322fcvtTab
	u64_f32             u642fcvtTab
	u64_f64             u642fcvtTab
	uint64fpConvOpToSSA map[twoTypes]twoOpsAndType
	unOps               [20]Op
	unsafeFuncs         [3]struct {
		name string
		op   Op
	}

	unsafepkg *types.Pkg

	use_writebarrier bool
	vargen           int

	wrapCall_prgen int
	writearchive   bool
	xtop           []*Node
	zerosize       int64
}

func NewPackageSession(types_psess *types.PackageSession, obj_psess *obj.PackageSession, src_psess *src.PackageSession, ssa_psess *ssa.PackageSession, sys_psess *sys.PackageSession, syntax_psess *syntax.PackageSession, bio_psess *bio.PackageSession, gcprog_psess *gcprog.PackageSession, objabi_psess *objabi.PackageSession, dwarf_psess *dwarf.PackageSession) *PackageSession {
	psess := &PackageSession{}
	psess.types = types_psess
	psess.obj = obj_psess
	psess.src = src_psess
	psess.ssa = ssa_psess
	psess.sys = sys_psess
	psess.syntax = syntax_psess
	psess.bio = bio_psess
	psess.gcprog = gcprog_psess
	psess.objabi = objabi_psess
	psess.dwarf = dwarf_psess
	psess.u64_f64 = u642fcvtTab{
		geq:   ssa.OpGeq64,
		cvt2F: ssa.OpCvt64to64F,
		and:   ssa.OpAnd64,
		rsh:   ssa.OpRsh64Ux64,
		or:    ssa.OpOr64,
		add:   ssa.OpAdd64F,
		one:   (*state).constInt64,
	}
	psess.u64_f32 = u642fcvtTab{
		geq:   ssa.OpGeq64,
		cvt2F: ssa.OpCvt64to32F,
		and:   ssa.OpAnd64,
		rsh:   ssa.OpRsh64Ux64,
		or:    ssa.OpOr64,
		add:   ssa.OpAdd32F,
		one:   (*state).constInt64,
	}
	psess.u32_f64 = u322fcvtTab{
		cvtI2F: ssa.OpCvt32to64F,
		cvtF2F: ssa.OpCopy,
	}
	psess.u32_f32 = u322fcvtTab{
		cvtI2F: ssa.OpCvt32to32F,
		cvtF2F: ssa.OpCvt64Fto32F,
	}
	psess.f32_u64 = f2uCvtTab{
		ltf:        ssa.OpLess32F,
		cvt2U:      ssa.OpCvt32Fto64,
		subf:       ssa.OpSub32F,
		or:         ssa.OpOr64,
		floatValue: (*state).constFloat32,
		intValue:   (*state).constInt64,
		cutoff:     9223372036854775808,
	}
	psess.f64_u64 = f2uCvtTab{
		ltf:        ssa.OpLess64F,
		cvt2U:      ssa.OpCvt64Fto64,
		subf:       ssa.OpSub64F,
		or:         ssa.OpOr64,
		floatValue: (*state).constFloat64,
		intValue:   (*state).constInt64,
		cutoff:     9223372036854775808,
	}
	psess.f32_u32 = f2uCvtTab{
		ltf:        ssa.OpLess32F,
		cvt2U:      ssa.OpCvt32Fto32,
		subf:       ssa.OpSub32F,
		or:         ssa.OpOr32,
		floatValue: (*state).constFloat32,
		intValue:   func(s *state, t *types.Type, v int64) *ssa.Value { return s.constInt32(psess, t, int32(v)) },
		cutoff:     2147483648,
	}
	psess.f64_u32 = f2uCvtTab{
		ltf:        ssa.OpLess64F,
		cvt2U:      ssa.OpCvt64Fto32,
		subf:       ssa.OpSub64F,
		or:         ssa.OpOr32,
		floatValue: (*state).constFloat64,
		intValue:   func(s *state, t *types.Type, v int64) *ssa.Value { return s.constInt32(psess, t, int32(v)) },
		cutoff:     2147483648,
	}
	psess.memVar = Node{Op: ONAME, Sym: &types.Sym{Name: "mem"}}
	psess.ptrVar = Node{Op: ONAME, Sym: &types.Sym{Name: "ptr"}}
	psess.lenVar = Node{Op: ONAME, Sym: &types.Sym{Name: "len"}}
	psess.newlenVar = Node{Op: ONAME, Sym: &types.Sym{Name: "newlen"}}
	psess.capVar = Node{Op: ONAME, Sym: &types.Sym{Name: "cap"}}
	psess.typVar = Node{Op: ONAME, Sym: &types.Sym{Name: "typ"}}
	psess.okVar = Node{Op: ONAME, Sym: &types.Sym{Name: "ok"}}
	psess.shiftOpToSSA = map[opAndTwoTypes]ssa.Op{
		opAndTwoTypes{OLSH, TINT8, TUINT8}:   ssa.OpLsh8x8,
		opAndTwoTypes{OLSH, TUINT8, TUINT8}:  ssa.OpLsh8x8,
		opAndTwoTypes{OLSH, TINT8, TUINT16}:  ssa.OpLsh8x16,
		opAndTwoTypes{OLSH, TUINT8, TUINT16}: ssa.OpLsh8x16,
		opAndTwoTypes{OLSH, TINT8, TUINT32}:  ssa.OpLsh8x32,
		opAndTwoTypes{OLSH, TUINT8, TUINT32}: ssa.OpLsh8x32,
		opAndTwoTypes{OLSH, TINT8, TUINT64}:  ssa.OpLsh8x64,
		opAndTwoTypes{OLSH, TUINT8, TUINT64}: ssa.OpLsh8x64,

		opAndTwoTypes{OLSH, TINT16, TUINT8}:   ssa.OpLsh16x8,
		opAndTwoTypes{OLSH, TUINT16, TUINT8}:  ssa.OpLsh16x8,
		opAndTwoTypes{OLSH, TINT16, TUINT16}:  ssa.OpLsh16x16,
		opAndTwoTypes{OLSH, TUINT16, TUINT16}: ssa.OpLsh16x16,
		opAndTwoTypes{OLSH, TINT16, TUINT32}:  ssa.OpLsh16x32,
		opAndTwoTypes{OLSH, TUINT16, TUINT32}: ssa.OpLsh16x32,
		opAndTwoTypes{OLSH, TINT16, TUINT64}:  ssa.OpLsh16x64,
		opAndTwoTypes{OLSH, TUINT16, TUINT64}: ssa.OpLsh16x64,

		opAndTwoTypes{OLSH, TINT32, TUINT8}:   ssa.OpLsh32x8,
		opAndTwoTypes{OLSH, TUINT32, TUINT8}:  ssa.OpLsh32x8,
		opAndTwoTypes{OLSH, TINT32, TUINT16}:  ssa.OpLsh32x16,
		opAndTwoTypes{OLSH, TUINT32, TUINT16}: ssa.OpLsh32x16,
		opAndTwoTypes{OLSH, TINT32, TUINT32}:  ssa.OpLsh32x32,
		opAndTwoTypes{OLSH, TUINT32, TUINT32}: ssa.OpLsh32x32,
		opAndTwoTypes{OLSH, TINT32, TUINT64}:  ssa.OpLsh32x64,
		opAndTwoTypes{OLSH, TUINT32, TUINT64}: ssa.OpLsh32x64,

		opAndTwoTypes{OLSH, TINT64, TUINT8}:   ssa.OpLsh64x8,
		opAndTwoTypes{OLSH, TUINT64, TUINT8}:  ssa.OpLsh64x8,
		opAndTwoTypes{OLSH, TINT64, TUINT16}:  ssa.OpLsh64x16,
		opAndTwoTypes{OLSH, TUINT64, TUINT16}: ssa.OpLsh64x16,
		opAndTwoTypes{OLSH, TINT64, TUINT32}:  ssa.OpLsh64x32,
		opAndTwoTypes{OLSH, TUINT64, TUINT32}: ssa.OpLsh64x32,
		opAndTwoTypes{OLSH, TINT64, TUINT64}:  ssa.OpLsh64x64,
		opAndTwoTypes{OLSH, TUINT64, TUINT64}: ssa.OpLsh64x64,

		opAndTwoTypes{ORSH, TINT8, TUINT8}:   ssa.OpRsh8x8,
		opAndTwoTypes{ORSH, TUINT8, TUINT8}:  ssa.OpRsh8Ux8,
		opAndTwoTypes{ORSH, TINT8, TUINT16}:  ssa.OpRsh8x16,
		opAndTwoTypes{ORSH, TUINT8, TUINT16}: ssa.OpRsh8Ux16,
		opAndTwoTypes{ORSH, TINT8, TUINT32}:  ssa.OpRsh8x32,
		opAndTwoTypes{ORSH, TUINT8, TUINT32}: ssa.OpRsh8Ux32,
		opAndTwoTypes{ORSH, TINT8, TUINT64}:  ssa.OpRsh8x64,
		opAndTwoTypes{ORSH, TUINT8, TUINT64}: ssa.OpRsh8Ux64,

		opAndTwoTypes{ORSH, TINT16, TUINT8}:   ssa.OpRsh16x8,
		opAndTwoTypes{ORSH, TUINT16, TUINT8}:  ssa.OpRsh16Ux8,
		opAndTwoTypes{ORSH, TINT16, TUINT16}:  ssa.OpRsh16x16,
		opAndTwoTypes{ORSH, TUINT16, TUINT16}: ssa.OpRsh16Ux16,
		opAndTwoTypes{ORSH, TINT16, TUINT32}:  ssa.OpRsh16x32,
		opAndTwoTypes{ORSH, TUINT16, TUINT32}: ssa.OpRsh16Ux32,
		opAndTwoTypes{ORSH, TINT16, TUINT64}:  ssa.OpRsh16x64,
		opAndTwoTypes{ORSH, TUINT16, TUINT64}: ssa.OpRsh16Ux64,

		opAndTwoTypes{ORSH, TINT32, TUINT8}:   ssa.OpRsh32x8,
		opAndTwoTypes{ORSH, TUINT32, TUINT8}:  ssa.OpRsh32Ux8,
		opAndTwoTypes{ORSH, TINT32, TUINT16}:  ssa.OpRsh32x16,
		opAndTwoTypes{ORSH, TUINT32, TUINT16}: ssa.OpRsh32Ux16,
		opAndTwoTypes{ORSH, TINT32, TUINT32}:  ssa.OpRsh32x32,
		opAndTwoTypes{ORSH, TUINT32, TUINT32}: ssa.OpRsh32Ux32,
		opAndTwoTypes{ORSH, TINT32, TUINT64}:  ssa.OpRsh32x64,
		opAndTwoTypes{ORSH, TUINT32, TUINT64}: ssa.OpRsh32Ux64,

		opAndTwoTypes{ORSH, TINT64, TUINT8}:   ssa.OpRsh64x8,
		opAndTwoTypes{ORSH, TUINT64, TUINT8}:  ssa.OpRsh64Ux8,
		opAndTwoTypes{ORSH, TINT64, TUINT16}:  ssa.OpRsh64x16,
		opAndTwoTypes{ORSH, TUINT64, TUINT16}: ssa.OpRsh64Ux16,
		opAndTwoTypes{ORSH, TINT64, TUINT32}:  ssa.OpRsh64x32,
		opAndTwoTypes{ORSH, TUINT64, TUINT32}: ssa.OpRsh64Ux32,
		opAndTwoTypes{ORSH, TINT64, TUINT64}:  ssa.OpRsh64x64,
		opAndTwoTypes{ORSH, TUINT64, TUINT64}: ssa.OpRsh64Ux64,
	}
	psess.fpConvOpToSSA = map[twoTypes]twoOpsAndType{

		twoTypes{TINT8, TFLOAT32}:  twoOpsAndType{ssa.OpSignExt8to32, ssa.OpCvt32to32F, TINT32},
		twoTypes{TINT16, TFLOAT32}: twoOpsAndType{ssa.OpSignExt16to32, ssa.OpCvt32to32F, TINT32},
		twoTypes{TINT32, TFLOAT32}: twoOpsAndType{ssa.OpCopy, ssa.OpCvt32to32F, TINT32},
		twoTypes{TINT64, TFLOAT32}: twoOpsAndType{ssa.OpCopy, ssa.OpCvt64to32F, TINT64},

		twoTypes{TINT8, TFLOAT64}:  twoOpsAndType{ssa.OpSignExt8to32, ssa.OpCvt32to64F, TINT32},
		twoTypes{TINT16, TFLOAT64}: twoOpsAndType{ssa.OpSignExt16to32, ssa.OpCvt32to64F, TINT32},
		twoTypes{TINT32, TFLOAT64}: twoOpsAndType{ssa.OpCopy, ssa.OpCvt32to64F, TINT32},
		twoTypes{TINT64, TFLOAT64}: twoOpsAndType{ssa.OpCopy, ssa.OpCvt64to64F, TINT64},

		twoTypes{TFLOAT32, TINT8}:  twoOpsAndType{ssa.OpCvt32Fto32, ssa.OpTrunc32to8, TINT32},
		twoTypes{TFLOAT32, TINT16}: twoOpsAndType{ssa.OpCvt32Fto32, ssa.OpTrunc32to16, TINT32},
		twoTypes{TFLOAT32, TINT32}: twoOpsAndType{ssa.OpCvt32Fto32, ssa.OpCopy, TINT32},
		twoTypes{TFLOAT32, TINT64}: twoOpsAndType{ssa.OpCvt32Fto64, ssa.OpCopy, TINT64},

		twoTypes{TFLOAT64, TINT8}:  twoOpsAndType{ssa.OpCvt64Fto32, ssa.OpTrunc32to8, TINT32},
		twoTypes{TFLOAT64, TINT16}: twoOpsAndType{ssa.OpCvt64Fto32, ssa.OpTrunc32to16, TINT32},
		twoTypes{TFLOAT64, TINT32}: twoOpsAndType{ssa.OpCvt64Fto32, ssa.OpCopy, TINT32},
		twoTypes{TFLOAT64, TINT64}: twoOpsAndType{ssa.OpCvt64Fto64, ssa.OpCopy, TINT64},

		twoTypes{TUINT8, TFLOAT32}:  twoOpsAndType{ssa.OpZeroExt8to32, ssa.OpCvt32to32F, TINT32},
		twoTypes{TUINT16, TFLOAT32}: twoOpsAndType{ssa.OpZeroExt16to32, ssa.OpCvt32to32F, TINT32},
		twoTypes{TUINT32, TFLOAT32}: twoOpsAndType{ssa.OpZeroExt32to64, ssa.OpCvt64to32F, TINT64},
		twoTypes{TUINT64, TFLOAT32}: twoOpsAndType{ssa.OpCopy, ssa.OpInvalid, TUINT64},

		twoTypes{TUINT8, TFLOAT64}:  twoOpsAndType{ssa.OpZeroExt8to32, ssa.OpCvt32to64F, TINT32},
		twoTypes{TUINT16, TFLOAT64}: twoOpsAndType{ssa.OpZeroExt16to32, ssa.OpCvt32to64F, TINT32},
		twoTypes{TUINT32, TFLOAT64}: twoOpsAndType{ssa.OpZeroExt32to64, ssa.OpCvt64to64F, TINT64},
		twoTypes{TUINT64, TFLOAT64}: twoOpsAndType{ssa.OpCopy, ssa.OpInvalid, TUINT64},

		twoTypes{TFLOAT32, TUINT8}:  twoOpsAndType{ssa.OpCvt32Fto32, ssa.OpTrunc32to8, TINT32},
		twoTypes{TFLOAT32, TUINT16}: twoOpsAndType{ssa.OpCvt32Fto32, ssa.OpTrunc32to16, TINT32},
		twoTypes{TFLOAT32, TUINT32}: twoOpsAndType{ssa.OpCvt32Fto64, ssa.OpTrunc64to32, TINT64},
		twoTypes{TFLOAT32, TUINT64}: twoOpsAndType{ssa.OpInvalid, ssa.OpCopy, TUINT64},

		twoTypes{TFLOAT64, TUINT8}:  twoOpsAndType{ssa.OpCvt64Fto32, ssa.OpTrunc32to8, TINT32},
		twoTypes{TFLOAT64, TUINT16}: twoOpsAndType{ssa.OpCvt64Fto32, ssa.OpTrunc32to16, TINT32},
		twoTypes{TFLOAT64, TUINT32}: twoOpsAndType{ssa.OpCvt64Fto64, ssa.OpTrunc64to32, TINT64},
		twoTypes{TFLOAT64, TUINT64}: twoOpsAndType{ssa.OpInvalid, ssa.OpCopy, TUINT64},

		twoTypes{TFLOAT64, TFLOAT32}: twoOpsAndType{ssa.OpCvt64Fto32F, ssa.OpCopy, TFLOAT32},
		twoTypes{TFLOAT64, TFLOAT64}: twoOpsAndType{ssa.OpRound64F, ssa.OpCopy, TFLOAT64},
		twoTypes{TFLOAT32, TFLOAT32}: twoOpsAndType{ssa.OpRound32F, ssa.OpCopy, TFLOAT32},
		twoTypes{TFLOAT32, TFLOAT64}: twoOpsAndType{ssa.OpCvt32Fto64F, ssa.OpCopy, TFLOAT64},
	}
	psess.fpConvOpToSSA32 = map[twoTypes]twoOpsAndType{
		twoTypes{TUINT32, TFLOAT32}: twoOpsAndType{ssa.OpCopy, ssa.OpCvt32Uto32F, TUINT32},
		twoTypes{TUINT32, TFLOAT64}: twoOpsAndType{ssa.OpCopy, ssa.OpCvt32Uto64F, TUINT32},
		twoTypes{TFLOAT32, TUINT32}: twoOpsAndType{ssa.OpCvt32Fto32U, ssa.OpCopy, TUINT32},
		twoTypes{TFLOAT64, TUINT32}: twoOpsAndType{ssa.OpCvt64Fto32U, ssa.OpCopy, TUINT32},
	}
	psess.uint64fpConvOpToSSA = map[twoTypes]twoOpsAndType{
		twoTypes{TUINT64, TFLOAT32}: twoOpsAndType{ssa.OpCopy, ssa.OpCvt64Uto32F, TUINT64},
		twoTypes{TUINT64, TFLOAT64}: twoOpsAndType{ssa.OpCopy, ssa.OpCvt64Uto64F, TUINT64},
		twoTypes{TFLOAT32, TUINT64}: twoOpsAndType{ssa.OpCvt32Fto64U, ssa.OpCopy, TUINT64},
		twoTypes{TFLOAT64, TUINT64}: twoOpsAndType{ssa.OpCvt64Fto64U, ssa.OpCopy, TUINT64},
	}
	psess.opToSSA = map[opAndType]ssa.Op{
		opAndType{OADD, TINT8}:    ssa.OpAdd8,
		opAndType{OADD, TUINT8}:   ssa.OpAdd8,
		opAndType{OADD, TINT16}:   ssa.OpAdd16,
		opAndType{OADD, TUINT16}:  ssa.OpAdd16,
		opAndType{OADD, TINT32}:   ssa.OpAdd32,
		opAndType{OADD, TUINT32}:  ssa.OpAdd32,
		opAndType{OADD, TPTR32}:   ssa.OpAdd32,
		opAndType{OADD, TINT64}:   ssa.OpAdd64,
		opAndType{OADD, TUINT64}:  ssa.OpAdd64,
		opAndType{OADD, TPTR64}:   ssa.OpAdd64,
		opAndType{OADD, TFLOAT32}: ssa.OpAdd32F,
		opAndType{OADD, TFLOAT64}: ssa.OpAdd64F,

		opAndType{OSUB, TINT8}:    ssa.OpSub8,
		opAndType{OSUB, TUINT8}:   ssa.OpSub8,
		opAndType{OSUB, TINT16}:   ssa.OpSub16,
		opAndType{OSUB, TUINT16}:  ssa.OpSub16,
		opAndType{OSUB, TINT32}:   ssa.OpSub32,
		opAndType{OSUB, TUINT32}:  ssa.OpSub32,
		opAndType{OSUB, TINT64}:   ssa.OpSub64,
		opAndType{OSUB, TUINT64}:  ssa.OpSub64,
		opAndType{OSUB, TFLOAT32}: ssa.OpSub32F,
		opAndType{OSUB, TFLOAT64}: ssa.OpSub64F,

		opAndType{ONOT, TBOOL}: ssa.OpNot,

		opAndType{OMINUS, TINT8}:    ssa.OpNeg8,
		opAndType{OMINUS, TUINT8}:   ssa.OpNeg8,
		opAndType{OMINUS, TINT16}:   ssa.OpNeg16,
		opAndType{OMINUS, TUINT16}:  ssa.OpNeg16,
		opAndType{OMINUS, TINT32}:   ssa.OpNeg32,
		opAndType{OMINUS, TUINT32}:  ssa.OpNeg32,
		opAndType{OMINUS, TINT64}:   ssa.OpNeg64,
		opAndType{OMINUS, TUINT64}:  ssa.OpNeg64,
		opAndType{OMINUS, TFLOAT32}: ssa.OpNeg32F,
		opAndType{OMINUS, TFLOAT64}: ssa.OpNeg64F,

		opAndType{OCOM, TINT8}:   ssa.OpCom8,
		opAndType{OCOM, TUINT8}:  ssa.OpCom8,
		opAndType{OCOM, TINT16}:  ssa.OpCom16,
		opAndType{OCOM, TUINT16}: ssa.OpCom16,
		opAndType{OCOM, TINT32}:  ssa.OpCom32,
		opAndType{OCOM, TUINT32}: ssa.OpCom32,
		opAndType{OCOM, TINT64}:  ssa.OpCom64,
		opAndType{OCOM, TUINT64}: ssa.OpCom64,

		opAndType{OIMAG, TCOMPLEX64}:  ssa.OpComplexImag,
		opAndType{OIMAG, TCOMPLEX128}: ssa.OpComplexImag,
		opAndType{OREAL, TCOMPLEX64}:  ssa.OpComplexReal,
		opAndType{OREAL, TCOMPLEX128}: ssa.OpComplexReal,

		opAndType{OMUL, TINT8}:    ssa.OpMul8,
		opAndType{OMUL, TUINT8}:   ssa.OpMul8,
		opAndType{OMUL, TINT16}:   ssa.OpMul16,
		opAndType{OMUL, TUINT16}:  ssa.OpMul16,
		opAndType{OMUL, TINT32}:   ssa.OpMul32,
		opAndType{OMUL, TUINT32}:  ssa.OpMul32,
		opAndType{OMUL, TINT64}:   ssa.OpMul64,
		opAndType{OMUL, TUINT64}:  ssa.OpMul64,
		opAndType{OMUL, TFLOAT32}: ssa.OpMul32F,
		opAndType{OMUL, TFLOAT64}: ssa.OpMul64F,

		opAndType{ODIV, TFLOAT32}: ssa.OpDiv32F,
		opAndType{ODIV, TFLOAT64}: ssa.OpDiv64F,

		opAndType{ODIV, TINT8}:   ssa.OpDiv8,
		opAndType{ODIV, TUINT8}:  ssa.OpDiv8u,
		opAndType{ODIV, TINT16}:  ssa.OpDiv16,
		opAndType{ODIV, TUINT16}: ssa.OpDiv16u,
		opAndType{ODIV, TINT32}:  ssa.OpDiv32,
		opAndType{ODIV, TUINT32}: ssa.OpDiv32u,
		opAndType{ODIV, TINT64}:  ssa.OpDiv64,
		opAndType{ODIV, TUINT64}: ssa.OpDiv64u,

		opAndType{OMOD, TINT8}:   ssa.OpMod8,
		opAndType{OMOD, TUINT8}:  ssa.OpMod8u,
		opAndType{OMOD, TINT16}:  ssa.OpMod16,
		opAndType{OMOD, TUINT16}: ssa.OpMod16u,
		opAndType{OMOD, TINT32}:  ssa.OpMod32,
		opAndType{OMOD, TUINT32}: ssa.OpMod32u,
		opAndType{OMOD, TINT64}:  ssa.OpMod64,
		opAndType{OMOD, TUINT64}: ssa.OpMod64u,

		opAndType{OAND, TINT8}:   ssa.OpAnd8,
		opAndType{OAND, TUINT8}:  ssa.OpAnd8,
		opAndType{OAND, TINT16}:  ssa.OpAnd16,
		opAndType{OAND, TUINT16}: ssa.OpAnd16,
		opAndType{OAND, TINT32}:  ssa.OpAnd32,
		opAndType{OAND, TUINT32}: ssa.OpAnd32,
		opAndType{OAND, TINT64}:  ssa.OpAnd64,
		opAndType{OAND, TUINT64}: ssa.OpAnd64,

		opAndType{OOR, TINT8}:   ssa.OpOr8,
		opAndType{OOR, TUINT8}:  ssa.OpOr8,
		opAndType{OOR, TINT16}:  ssa.OpOr16,
		opAndType{OOR, TUINT16}: ssa.OpOr16,
		opAndType{OOR, TINT32}:  ssa.OpOr32,
		opAndType{OOR, TUINT32}: ssa.OpOr32,
		opAndType{OOR, TINT64}:  ssa.OpOr64,
		opAndType{OOR, TUINT64}: ssa.OpOr64,

		opAndType{OXOR, TINT8}:   ssa.OpXor8,
		opAndType{OXOR, TUINT8}:  ssa.OpXor8,
		opAndType{OXOR, TINT16}:  ssa.OpXor16,
		opAndType{OXOR, TUINT16}: ssa.OpXor16,
		opAndType{OXOR, TINT32}:  ssa.OpXor32,
		opAndType{OXOR, TUINT32}: ssa.OpXor32,
		opAndType{OXOR, TINT64}:  ssa.OpXor64,
		opAndType{OXOR, TUINT64}: ssa.OpXor64,

		opAndType{OEQ, TBOOL}:      ssa.OpEqB,
		opAndType{OEQ, TINT8}:      ssa.OpEq8,
		opAndType{OEQ, TUINT8}:     ssa.OpEq8,
		opAndType{OEQ, TINT16}:     ssa.OpEq16,
		opAndType{OEQ, TUINT16}:    ssa.OpEq16,
		opAndType{OEQ, TINT32}:     ssa.OpEq32,
		opAndType{OEQ, TUINT32}:    ssa.OpEq32,
		opAndType{OEQ, TINT64}:     ssa.OpEq64,
		opAndType{OEQ, TUINT64}:    ssa.OpEq64,
		opAndType{OEQ, TINTER}:     ssa.OpEqInter,
		opAndType{OEQ, TSLICE}:     ssa.OpEqSlice,
		opAndType{OEQ, TFUNC}:      ssa.OpEqPtr,
		opAndType{OEQ, TMAP}:       ssa.OpEqPtr,
		opAndType{OEQ, TCHAN}:      ssa.OpEqPtr,
		opAndType{OEQ, TPTR32}:     ssa.OpEqPtr,
		opAndType{OEQ, TPTR64}:     ssa.OpEqPtr,
		opAndType{OEQ, TUINTPTR}:   ssa.OpEqPtr,
		opAndType{OEQ, TUNSAFEPTR}: ssa.OpEqPtr,
		opAndType{OEQ, TFLOAT64}:   ssa.OpEq64F,
		opAndType{OEQ, TFLOAT32}:   ssa.OpEq32F,

		opAndType{ONE, TBOOL}:      ssa.OpNeqB,
		opAndType{ONE, TINT8}:      ssa.OpNeq8,
		opAndType{ONE, TUINT8}:     ssa.OpNeq8,
		opAndType{ONE, TINT16}:     ssa.OpNeq16,
		opAndType{ONE, TUINT16}:    ssa.OpNeq16,
		opAndType{ONE, TINT32}:     ssa.OpNeq32,
		opAndType{ONE, TUINT32}:    ssa.OpNeq32,
		opAndType{ONE, TINT64}:     ssa.OpNeq64,
		opAndType{ONE, TUINT64}:    ssa.OpNeq64,
		opAndType{ONE, TINTER}:     ssa.OpNeqInter,
		opAndType{ONE, TSLICE}:     ssa.OpNeqSlice,
		opAndType{ONE, TFUNC}:      ssa.OpNeqPtr,
		opAndType{ONE, TMAP}:       ssa.OpNeqPtr,
		opAndType{ONE, TCHAN}:      ssa.OpNeqPtr,
		opAndType{ONE, TPTR32}:     ssa.OpNeqPtr,
		opAndType{ONE, TPTR64}:     ssa.OpNeqPtr,
		opAndType{ONE, TUINTPTR}:   ssa.OpNeqPtr,
		opAndType{ONE, TUNSAFEPTR}: ssa.OpNeqPtr,
		opAndType{ONE, TFLOAT64}:   ssa.OpNeq64F,
		opAndType{ONE, TFLOAT32}:   ssa.OpNeq32F,

		opAndType{OLT, TINT8}:    ssa.OpLess8,
		opAndType{OLT, TUINT8}:   ssa.OpLess8U,
		opAndType{OLT, TINT16}:   ssa.OpLess16,
		opAndType{OLT, TUINT16}:  ssa.OpLess16U,
		opAndType{OLT, TINT32}:   ssa.OpLess32,
		opAndType{OLT, TUINT32}:  ssa.OpLess32U,
		opAndType{OLT, TINT64}:   ssa.OpLess64,
		opAndType{OLT, TUINT64}:  ssa.OpLess64U,
		opAndType{OLT, TFLOAT64}: ssa.OpLess64F,
		opAndType{OLT, TFLOAT32}: ssa.OpLess32F,

		opAndType{OGT, TINT8}:    ssa.OpGreater8,
		opAndType{OGT, TUINT8}:   ssa.OpGreater8U,
		opAndType{OGT, TINT16}:   ssa.OpGreater16,
		opAndType{OGT, TUINT16}:  ssa.OpGreater16U,
		opAndType{OGT, TINT32}:   ssa.OpGreater32,
		opAndType{OGT, TUINT32}:  ssa.OpGreater32U,
		opAndType{OGT, TINT64}:   ssa.OpGreater64,
		opAndType{OGT, TUINT64}:  ssa.OpGreater64U,
		opAndType{OGT, TFLOAT64}: ssa.OpGreater64F,
		opAndType{OGT, TFLOAT32}: ssa.OpGreater32F,

		opAndType{OLE, TINT8}:    ssa.OpLeq8,
		opAndType{OLE, TUINT8}:   ssa.OpLeq8U,
		opAndType{OLE, TINT16}:   ssa.OpLeq16,
		opAndType{OLE, TUINT16}:  ssa.OpLeq16U,
		opAndType{OLE, TINT32}:   ssa.OpLeq32,
		opAndType{OLE, TUINT32}:  ssa.OpLeq32U,
		opAndType{OLE, TINT64}:   ssa.OpLeq64,
		opAndType{OLE, TUINT64}:  ssa.OpLeq64U,
		opAndType{OLE, TFLOAT64}: ssa.OpLeq64F,
		opAndType{OLE, TFLOAT32}: ssa.OpLeq32F,

		opAndType{OGE, TINT8}:    ssa.OpGeq8,
		opAndType{OGE, TUINT8}:   ssa.OpGeq8U,
		opAndType{OGE, TINT16}:   ssa.OpGeq16,
		opAndType{OGE, TUINT16}:  ssa.OpGeq16U,
		opAndType{OGE, TINT32}:   ssa.OpGeq32,
		opAndType{OGE, TUINT32}:  ssa.OpGeq32U,
		opAndType{OGE, TINT64}:   ssa.OpGeq64,
		opAndType{OGE, TUINT64}:  ssa.OpGeq64U,
		opAndType{OGE, TFLOAT64}: ssa.OpGeq64F,
		opAndType{OGE, TFLOAT32}: ssa.OpGeq32F,
	}
	psess._Class_index = [...]uint8{0, 4, 11, 16, 25, 31, 40, 45, 53}
	psess.declImporter = map[*types.Sym]iimporterAndOffset{}
	psess.inlineImporter = map[*types.Sym]iimporterAndOffset{}
	psess.signatset = make(map[*types.Type]struct{})
	psess.kinds = []int{
		TINT:        objabi.KindInt,
		TUINT:       objabi.KindUint,
		TINT8:       objabi.KindInt8,
		TUINT8:      objabi.KindUint8,
		TINT16:      objabi.KindInt16,
		TUINT16:     objabi.KindUint16,
		TINT32:      objabi.KindInt32,
		TUINT32:     objabi.KindUint32,
		TINT64:      objabi.KindInt64,
		TUINT64:     objabi.KindUint64,
		TUINTPTR:    objabi.KindUintptr,
		TFLOAT32:    objabi.KindFloat32,
		TFLOAT64:    objabi.KindFloat64,
		TBOOL:       objabi.KindBool,
		TSTRING:     objabi.KindString,
		TPTR32:      objabi.KindPtr,
		TPTR64:      objabi.KindPtr,
		TSTRUCT:     objabi.KindStruct,
		TINTER:      objabi.KindInterface,
		TCHAN:       objabi.KindChan,
		TMAP:        objabi.KindMap,
		TARRAY:      objabi.KindArray,
		TSLICE:      objabi.KindSlice,
		TFUNC:       objabi.KindFunc,
		TCOMPLEX64:  objabi.KindComplex64,
		TCOMPLEX128: objabi.KindComplex128,
		TUNSAFEPTR:  objabi.KindUnsafePointer,
	}
	psess.typepkg = psess.types.
		NewPkg("type", "type")
	psess.importMap = map[string]string{}
	psess.concurrentFlagOK = [256]bool{
		'B': true,
		'C': true,
		'e': true,
		'I': true,
		'N': true,
		'l': true,
		'w': true,
		'W': true,
	}
	psess.sharedProgArray = new([10000]obj.Prog)
	psess.dotlist = make([]Dlist, 10)
	psess.reservedimports = []string{
		"go",
		"type",
	}
	psess.keepAlive = func(interface{}) {}
	psess._Op_index = [...]uint16{0, 3, 7, 13, 17, 21, 28, 31, 34, 36, 39, 45, 49, 55, 61, 73, 88, 100, 112, 127, 139, 141, 144, 151, 158, 165, 175, 179, 183, 191, 199, 208, 216, 219, 224, 231, 239, 245, 252, 258, 267, 275, 283, 289, 293, 302, 309, 313, 316, 323, 331, 339, 346, 352, 355, 361, 368, 376, 380, 387, 395, 397, 399, 401, 403, 405, 407, 410, 415, 423, 426, 435, 438, 442, 450, 457, 466, 469, 472, 475, 478, 481, 484, 490, 493, 496, 499, 503, 508, 512, 517, 522, 528, 533, 537, 542, 550, 558, 564, 573, 580, 584, 591, 598, 606, 610, 614, 618, 625, 632, 640, 646, 651, 656, 660, 665, 673, 678, 683, 687, 690, 698, 702, 704, 709, 713, 718, 724, 730, 736, 742, 747, 751, 758, 764, 769, 775, 778, 784, 791, 796, 800, 805, 809, 819, 824, 832, 839, 846, 854, 860, 864, 867}
	psess.unOps = [...]Op{
		syntax.Recv: ORECV,
		syntax.Mul:  OIND,
		syntax.And:  OADDR,

		syntax.Not: ONOT,
		syntax.Xor: OCOM,
		syntax.Add: OPLUS,
		syntax.Sub: OMINUS,
	}
	psess.binOps = [...]Op{
		syntax.OrOr:   OOROR,
		syntax.AndAnd: OANDAND,

		syntax.Eql: OEQ,
		syntax.Neq: ONE,
		syntax.Lss: OLT,
		syntax.Leq: OLE,
		syntax.Gtr: OGT,
		syntax.Geq: OGE,

		syntax.Add: OADD,
		syntax.Sub: OSUB,
		syntax.Or:  OOR,
		syntax.Xor: OXOR,

		syntax.Mul:    OMUL,
		syntax.Div:    ODIV,
		syntax.Rem:    OMOD,
		syntax.And:    OAND,
		syntax.AndNot: OANDNOT,
		syntax.Shl:    OLSH,
		syntax.Shr:    ORSH,
	}
	psess.allowedStdPragmas = map[string]bool{
		"go:cgo_export_static":  true,
		"go:cgo_export_dynamic": true,
		"go:cgo_import_static":  true,
		"go:cgo_import_dynamic": true,
		"go:cgo_ldflag":         true,
		"go:cgo_dynamic_linker": true,
		"go:generate":           true,
	}
	psess.basicTypes = [...]struct {
		name  string
		etype types.EType
	}{
		{"int8", TINT8},
		{"int16", TINT16},
		{"int32", TINT32},
		{"int64", TINT64},
		{"uint8", TUINT8},
		{"uint16", TUINT16},
		{"uint32", TUINT32},
		{"uint64", TUINT64},
		{"float32", TFLOAT32},
		{"float64", TFLOAT64},
		{"complex64", TCOMPLEX64},
		{"complex128", TCOMPLEX128},
		{"bool", TBOOL},
		{"string", TSTRING},
	}
	psess.typedefs = [...]struct {
		name     string
		etype    types.EType
		sameas32 types.EType
		sameas64 types.EType
	}{
		{"int", TINT, TINT32, TINT64},
		{"uint", TUINT, TUINT32, TUINT64},
		{"uintptr", TUINTPTR, TUINT32, TUINT64},
	}
	psess.builtinFuncs = [...]struct {
		name string
		op   Op
	}{
		{"append", OAPPEND},
		{"cap", OCAP},
		{"close", OCLOSE},
		{"complex", OCOMPLEX},
		{"copy", OCOPY},
		{"delete", ODELETE},
		{"imag", OIMAG},
		{"len", OLEN},
		{"make", OMAKE},
		{"new", ONEW},
		{"panic", OPANIC},
		{"print", OPRINT},
		{"println", OPRINTN},
		{"real", OREAL},
		{"recover", ORECOVER},
	}
	psess.unsafeFuncs = [...]struct {
		name string
		op   Op
	}{
		{"Alignof", OALIGNOF},
		{"Offsetof", OOFFSETOF},
		{"Sizeof", OSIZEOF},
	}
	psess.inittemps = make(map[*Node]*Node)
	psess.numImport = make(map[string]int)
	psess.mapaccess1 = mkmapnames("mapaccess1", "")
	psess.mapaccess2 = mkmapnames("mapaccess2", "")
	psess.mapassign = mkmapnames("mapassign", "ptr")
	psess.mapdelete = mkmapnames("mapdelete", "")
	psess._typekind = []string{
		TINT:        "int",
		TUINT:       "uint",
		TINT8:       "int8",
		TUINT8:      "uint8",
		TINT16:      "int16",
		TUINT16:     "uint16",
		TINT32:      "int32",
		TUINT32:     "uint32",
		TINT64:      "int64",
		TUINT64:     "uint64",
		TUINTPTR:    "uintptr",
		TCOMPLEX64:  "complex64",
		TCOMPLEX128: "complex128",
		TFLOAT32:    "float32",
		TFLOAT64:    "float64",
		TBOOL:       "bool",
		TSTRING:     "string",
		TPTR32:      "pointer",
		TPTR64:      "pointer",
		TUNSAFEPTR:  "unsafe.Pointer",
		TSTRUCT:     "struct",
		TINTER:      "interface",
		TCHAN:       "chan",
		TMAP:        "map",
		TARRAY:      "array",
		TSLICE:      "slice",
		TFUNC:       "func",
		TNIL:        "nil",
		TIDEAL:      "untyped number",
	}
	psess.dotField = map[typeSymKey]*types.Field{}
	psess.runtimeDecls = [...]struct {
		name string
		tag  int
		typ  int
	}{
		{"newobject", funcTag, 4},
		{"panicindex", funcTag, 5},
		{"panicslice", funcTag, 5},
		{"panicdivide", funcTag, 5},
		{"panicmakeslicelen", funcTag, 5},
		{"throwinit", funcTag, 5},
		{"panicwrap", funcTag, 5},
		{"gopanic", funcTag, 7},
		{"gorecover", funcTag, 10},
		{"goschedguarded", funcTag, 5},
		{"printbool", funcTag, 12},
		{"printfloat", funcTag, 14},
		{"printint", funcTag, 16},
		{"printhex", funcTag, 18},
		{"printuint", funcTag, 18},
		{"printcomplex", funcTag, 20},
		{"printstring", funcTag, 22},
		{"printpointer", funcTag, 23},
		{"printiface", funcTag, 23},
		{"printeface", funcTag, 23},
		{"printslice", funcTag, 23},
		{"printnl", funcTag, 5},
		{"printsp", funcTag, 5},
		{"printlock", funcTag, 5},
		{"printunlock", funcTag, 5},
		{"concatstring2", funcTag, 26},
		{"concatstring3", funcTag, 27},
		{"concatstring4", funcTag, 28},
		{"concatstring5", funcTag, 29},
		{"concatstrings", funcTag, 31},
		{"cmpstring", funcTag, 33},
		{"intstring", funcTag, 36},
		{"slicebytetostring", funcTag, 38},
		{"slicebytetostringtmp", funcTag, 39},
		{"slicerunetostring", funcTag, 42},
		{"stringtoslicebyte", funcTag, 43},
		{"stringtoslicerune", funcTag, 46},
		{"slicecopy", funcTag, 48},
		{"slicestringcopy", funcTag, 49},
		{"decoderune", funcTag, 50},
		{"countrunes", funcTag, 51},
		{"convI2I", funcTag, 52},
		{"convT2E", funcTag, 53},
		{"convT2E16", funcTag, 52},
		{"convT2E32", funcTag, 52},
		{"convT2E64", funcTag, 52},
		{"convT2Estring", funcTag, 53},
		{"convT2Eslice", funcTag, 53},
		{"convT2Enoptr", funcTag, 53},
		{"convT2I", funcTag, 53},
		{"convT2I16", funcTag, 52},
		{"convT2I32", funcTag, 52},
		{"convT2I64", funcTag, 52},
		{"convT2Istring", funcTag, 53},
		{"convT2Islice", funcTag, 53},
		{"convT2Inoptr", funcTag, 53},
		{"assertE2I", funcTag, 52},
		{"assertE2I2", funcTag, 54},
		{"assertI2I", funcTag, 52},
		{"assertI2I2", funcTag, 54},
		{"panicdottypeE", funcTag, 55},
		{"panicdottypeI", funcTag, 55},
		{"panicnildottype", funcTag, 56},
		{"ifaceeq", funcTag, 59},
		{"efaceeq", funcTag, 59},
		{"fastrand", funcTag, 61},
		{"makemap64", funcTag, 63},
		{"makemap", funcTag, 64},
		{"makemap_small", funcTag, 65},
		{"mapaccess1", funcTag, 66},
		{"mapaccess1_fast32", funcTag, 67},
		{"mapaccess1_fast64", funcTag, 67},
		{"mapaccess1_faststr", funcTag, 67},
		{"mapaccess1_fat", funcTag, 68},
		{"mapaccess2", funcTag, 69},
		{"mapaccess2_fast32", funcTag, 70},
		{"mapaccess2_fast64", funcTag, 70},
		{"mapaccess2_faststr", funcTag, 70},
		{"mapaccess2_fat", funcTag, 71},
		{"mapassign", funcTag, 66},
		{"mapassign_fast32", funcTag, 67},
		{"mapassign_fast32ptr", funcTag, 67},
		{"mapassign_fast64", funcTag, 67},
		{"mapassign_fast64ptr", funcTag, 67},
		{"mapassign_faststr", funcTag, 67},
		{"mapiterinit", funcTag, 72},
		{"mapdelete", funcTag, 72},
		{"mapdelete_fast32", funcTag, 73},
		{"mapdelete_fast64", funcTag, 73},
		{"mapdelete_faststr", funcTag, 73},
		{"mapiternext", funcTag, 74},
		{"mapclear", funcTag, 75},
		{"makechan64", funcTag, 77},
		{"makechan", funcTag, 78},
		{"chanrecv1", funcTag, 80},
		{"chanrecv2", funcTag, 81},
		{"chansend1", funcTag, 83},
		{"closechan", funcTag, 23},
		{"writeBarrier", varTag, 85},
		{"typedmemmove", funcTag, 86},
		{"typedmemclr", funcTag, 87},
		{"typedslicecopy", funcTag, 88},
		{"selectnbsend", funcTag, 89},
		{"selectnbrecv", funcTag, 90},
		{"selectnbrecv2", funcTag, 92},
		{"selectsetpc", funcTag, 56},
		{"selectgo", funcTag, 93},
		{"block", funcTag, 5},
		{"makeslice", funcTag, 95},
		{"makeslice64", funcTag, 96},
		{"growslice", funcTag, 97},
		{"memmove", funcTag, 98},
		{"memclrNoHeapPointers", funcTag, 99},
		{"memclrHasPointers", funcTag, 99},
		{"memequal", funcTag, 100},
		{"memequal8", funcTag, 101},
		{"memequal16", funcTag, 101},
		{"memequal32", funcTag, 101},
		{"memequal64", funcTag, 101},
		{"memequal128", funcTag, 101},
		{"int64div", funcTag, 102},
		{"uint64div", funcTag, 103},
		{"int64mod", funcTag, 102},
		{"uint64mod", funcTag, 103},
		{"float64toint64", funcTag, 104},
		{"float64touint64", funcTag, 105},
		{"float64touint32", funcTag, 106},
		{"int64tofloat64", funcTag, 107},
		{"uint64tofloat64", funcTag, 108},
		{"uint32tofloat64", funcTag, 109},
		{"complex128div", funcTag, 110},
		{"racefuncenter", funcTag, 111},
		{"racefuncenterfp", funcTag, 5},
		{"racefuncexit", funcTag, 5},
		{"raceread", funcTag, 111},
		{"racewrite", funcTag, 111},
		{"racereadrange", funcTag, 112},
		{"racewriterange", funcTag, 112},
		{"msanread", funcTag, 112},
		{"msanwrite", funcTag, 112},
		{"support_popcnt", varTag, 11},
		{"support_sse41", varTag, 11},
	}
	psess.tagString = [...]string{

		-packageTag: "package",
		-constTag:   "const",
		-typeTag:    "type",
		-varTag:     "var",
		-funcTag:    "func",
		-endTag:     "end",

		-namedTag:     "named type",
		-arrayTag:     "array",
		-sliceTag:     "slice",
		-dddTag:       "ddd",
		-structTag:    "struct",
		-pointerTag:   "pointer",
		-signatureTag: "signature",
		-interfaceTag: "interface",
		-mapTag:       "map",
		-chanTag:      "chan",

		-falseTag:    "false",
		-trueTag:     "true",
		-int64Tag:    "int64",
		-floatTag:    "float",
		-fractionTag: "fraction",
		-complexTag:  "complex",
		-stringTag:   "string",
		-nilTag:      "nil",
		-unknownTag:  "unknown",

		-aliasTag: "alias",
	}
	psess.goopnames = []string{
		OADDR:     "&",
		OADD:      "+",
		OADDSTR:   "+",
		OALIGNOF:  "unsafe.Alignof",
		OANDAND:   "&&",
		OANDNOT:   "&^",
		OAND:      "&",
		OAPPEND:   "append",
		OAS:       "=",
		OAS2:      "=",
		OBREAK:    "break",
		OCALL:     "function call",
		OCAP:      "cap",
		OCASE:     "case",
		OCLOSE:    "close",
		OCOMPLEX:  "complex",
		OCOM:      "^",
		OCONTINUE: "continue",
		OCOPY:     "copy",
		ODELETE:   "delete",
		ODEFER:    "defer",
		ODIV:      "/",
		OEQ:       "==",
		OFALL:     "fallthrough",
		OFOR:      "for",
		OFORUNTIL: "foruntil",
		OGE:       ">=",
		OGOTO:     "goto",
		OGT:       ">",
		OIF:       "if",
		OIMAG:     "imag",
		OIND:      "*",
		OLEN:      "len",
		OLE:       "<=",
		OLSH:      "<<",
		OLT:       "<",
		OMAKE:     "make",
		OMINUS:    "-",
		OMOD:      "%",
		OMUL:      "*",
		ONEW:      "new",
		ONE:       "!=",
		ONOT:      "!",
		OOFFSETOF: "unsafe.Offsetof",
		OOROR:     "||",
		OOR:       "|",
		OPANIC:    "panic",
		OPLUS:     "+",
		OPRINTN:   "println",
		OPRINT:    "print",
		ORANGE:    "range",
		OREAL:     "real",
		ORECV:     "<-",
		ORECOVER:  "recover",
		ORETURN:   "return",
		ORSH:      ">>",
		OSELECT:   "select",
		OSEND:     "<-",
		OSIZEOF:   "unsafe.Sizeof",
		OSUB:      "-",
		OSWITCH:   "switch",
		OXOR:      "^",
	}
	psess.basicnames = []string{
		TINT:        "int",
		TUINT:       "uint",
		TINT8:       "int8",
		TUINT8:      "uint8",
		TINT16:      "int16",
		TUINT16:     "uint16",
		TINT32:      "int32",
		TUINT32:     "uint32",
		TINT64:      "int64",
		TUINT64:     "uint64",
		TUINTPTR:    "uintptr",
		TFLOAT32:    "float32",
		TFLOAT64:    "float64",
		TCOMPLEX64:  "complex64",
		TCOMPLEX128: "complex128",
		TBOOL:       "bool",
		TANY:        "any",
		TSTRING:     "string",
		TNIL:        "nil",
		TIDEAL:      "untyped number",
		TBLANK:      "blank",
	}
	psess.opprec = []int{
		OALIGNOF:      8,
		OAPPEND:       8,
		OARRAYBYTESTR: 8,
		OARRAYLIT:     8,
		OSLICELIT:     8,
		OARRAYRUNESTR: 8,
		OCALLFUNC:     8,
		OCALLINTER:    8,
		OCALLMETH:     8,
		OCALL:         8,
		OCAP:          8,
		OCLOSE:        8,
		OCONVIFACE:    8,
		OCONVNOP:      8,
		OCONV:         8,
		OCOPY:         8,
		ODELETE:       8,
		OGETG:         8,
		OLEN:          8,
		OLITERAL:      8,
		OMAKESLICE:    8,
		OMAKE:         8,
		OMAPLIT:       8,
		ONAME:         8,
		ONEW:          8,
		ONONAME:       8,
		OOFFSETOF:     8,
		OPACK:         8,
		OPANIC:        8,
		OPAREN:        8,
		OPRINTN:       8,
		OPRINT:        8,
		ORUNESTR:      8,
		OSIZEOF:       8,
		OSTRARRAYBYTE: 8,
		OSTRARRAYRUNE: 8,
		OSTRUCTLIT:    8,
		OTARRAY:       8,
		OTCHAN:        8,
		OTFUNC:        8,
		OTINTER:       8,
		OTMAP:         8,
		OTSTRUCT:      8,
		OINDEXMAP:     8,
		OINDEX:        8,
		OSLICE:        8,
		OSLICESTR:     8,
		OSLICEARR:     8,
		OSLICE3:       8,
		OSLICE3ARR:    8,
		ODOTINTER:     8,
		ODOTMETH:      8,
		ODOTPTR:       8,
		ODOTTYPE2:     8,
		ODOTTYPE:      8,
		ODOT:          8,
		OXDOT:         8,
		OCALLPART:     8,
		OPLUS:         7,
		ONOT:          7,
		OCOM:          7,
		OMINUS:        7,
		OADDR:         7,
		OIND:          7,
		ORECV:         7,
		OMUL:          6,
		ODIV:          6,
		OMOD:          6,
		OLSH:          6,
		ORSH:          6,
		OAND:          6,
		OANDNOT:       6,
		OADD:          5,
		OSUB:          5,
		OOR:           5,
		OXOR:          5,
		OEQ:           4,
		OLT:           4,
		OLE:           4,
		OGE:           4,
		OGT:           4,
		ONE:           4,
		OCMPSTR:       4,
		OCMPIFACE:     4,
		OSEND:         3,
		OANDAND:       2,
		OOROR:         1,

		OAS:         -1,
		OAS2:        -1,
		OAS2DOTTYPE: -1,
		OAS2FUNC:    -1,
		OAS2MAPR:    -1,
		OAS2RECV:    -1,
		OASOP:       -1,
		OBREAK:      -1,
		OCASE:       -1,
		OCONTINUE:   -1,
		ODCL:        -1,
		ODCLFIELD:   -1,
		ODEFER:      -1,
		OEMPTY:      -1,
		OFALL:       -1,
		OFOR:        -1,
		OFORUNTIL:   -1,
		OGOTO:       -1,
		OIF:         -1,
		OLABEL:      -1,
		OPROC:       -1,
		ORANGE:      -1,
		ORETURN:     -1,
		OSELECT:     -1,
		OSWITCH:     -1,
		OXCASE:      -1,

		OEND: 0,
	}
	psess.prealloc = map[*Node]*Node{}
	psess.LivenessInvalid = LivenessIndex{-2, -2}
	psess.debugtab = []struct {
		name string
		help string
		val  interface{} // must be *int or *string
	}{
		{"append", "print information about append compilation", &psess.Debug_append},
		{"closure", "print information about closure compilation", &psess.Debug_closure},
		{"compilelater", "compile functions as late as possible", &psess.Debug_compilelater},
		{"disablenil", "disable nil checks", &psess.disable_checknil},
		{"dclstack", "run internal dclstack check", &psess.debug_dclstack},
		{"gcprog", "print dump of GC programs", &psess.Debug_gcprog},
		{"nil", "print information about nil checks", &psess.Debug_checknil},
		{"panic", "do not hide any compiler panic", &psess.Debug_panic},
		{"slice", "print information about slice compilation", &psess.Debug_slice},
		{"typeassert", "print information about type assertion inlining", &psess.Debug_typeassert},
		{"wb", "print information about write barriers", &psess.Debug_wb},
		{"export", "print export data", &psess.Debug_export},
		{"pctab", "print named pc-value table", &psess.Debug_pctab},
		{"locationlists", "print information about DWARF location list creation", &psess.Debug_locationlist},
		{"typecheckinl", "eager typechecking of inline function bodies", &psess.Debug_typecheckinl},
		{"dwarfinl", "print information about DWARF inlined function creation", &psess.Debug_gendwarfinl},
		{"softfloat", "force compiler to emit soft-float code", &psess.Debug_softfloat},
	}
	psess.omit_pkgs = []string{"runtime/internal/atomic", "runtime/internal/sys", "runtime", "runtime/race", "runtime/msan", "internal/cpu"}
	psess.norace_inst_pkgs = []string{"sync", "sync/atomic"}
	return psess
}
