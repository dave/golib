package types

import (
	"fmt"
)

const BADWIDTH = -1000000000

// Initialized by frontend. Exists only here.
// either TPTR32 or TPTR64

// The following variables must be initialized early by the frontend.
// They are here to break import cycles.
// TODO(gri) eliminate these dependencies.

// orig: func sconv(s *Sym, flag FmtFlag, mode fmtMode) string
// orig: func tconv(t *Type, flag FmtFlag, mode fmtMode, depth int) string
// orig: func symFormat(sym *Sym, s fmt.State, verb rune, mode fmtMode)
// orig: func typeFormat(t *Type, s fmt.State, verb rune, mode fmtMode)

func (s *Sym) String(psess *PackageSession) string {
	return psess.Sconv(s, 0, psess.FErr)
}

func (sym *Sym) Format(psess *PackageSession, s fmt.State, verb rune) {
	psess.
		FormatSym(sym, s, verb, psess.FErr)
}

func (t *Type) String(psess *PackageSession) string {

	return psess.Tconv(t, 0, psess.FErr, 0)
}

// ShortString generates a short description of t.
// It is used in autogenerated method names, reflection,
// and itab names.
func (t *Type) ShortString(psess *PackageSession) string {
	return psess.Tconv(t, psess.FmtLeft, psess.FErr, 0)
}

// LongString generates a complete description of t.
// It is useful for reflection,
// or when a unique fingerprint or hash of a type is required.
func (t *Type) LongString(psess *PackageSession) string {
	return psess.Tconv(t, psess.FmtLeft|psess.FmtUnsigned, psess.FErr, 0)
}

func (t *Type) Format(psess *PackageSession, s fmt.State, verb rune) {
	psess.
		FormatType(t, s, verb, psess.FErr)
}

type bitset8 uint8

func (f *bitset8) set(mask uint8, b bool) {
	if b {
		*(*uint8)(f) |= mask
	} else {
		*(*uint8)(f) &^= mask
	}
}
