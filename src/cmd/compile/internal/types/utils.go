// Copyright 2017 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package types

import (
	"fmt"
	"github.com/dave/golib/src/cmd/internal/obj"
)

const BADWIDTH = -1000000000

func (s *Sym) String(pstate *PackageState) string {
	return pstate.Sconv(s, 0, pstate.FErr)
}

func (sym *Sym) Format(pstate *PackageState, s fmt.State, verb rune) {
	pstate.FormatSym(sym, s, verb, pstate.FErr)
}

func (t *Type) String(pstate *PackageState) string {
	// This is an external entry point, so we pass depth 0 to tconv.
	// The implementation of tconv (including typefmt and fldconv)
	// must take care not to use a type in a formatting string
	// to avoid resetting the recursion counter.
	return pstate.Tconv(t, 0, pstate.FErr, 0)
}

// ShortString generates a short description of t.
// It is used in autogenerated method names, reflection,
// and itab names.
func (t *Type) ShortString(pstate *PackageState) string {
	return pstate.Tconv(t, pstate.FmtLeft, pstate.FErr, 0)
}

// LongString generates a complete description of t.
// It is useful for reflection,
// or when a unique fingerprint or hash of a type is required.
func (t *Type) LongString(pstate *PackageState) string {
	return pstate.Tconv(t, pstate.FmtLeft|pstate.FmtUnsigned, pstate.FErr, 0)
}

func (t *Type) Format(pstate *PackageState, s fmt.State, verb rune) {
	pstate.FormatType(t, s, verb, pstate.FErr)
}

type bitset8 uint8

func (f *bitset8) set(mask uint8, b bool) {
	if b {
		*(*uint8)(f) |= mask
	} else {
		*(*uint8)(f) &^= mask
	}
}
