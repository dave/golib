// +build ignore

package main

var genericOps = []opData{

	{name: "Add8", argLength: 2, commutative: true},
	{name: "Add16", argLength: 2, commutative: true},
	{name: "Add32", argLength: 2, commutative: true},
	{name: "Add64", argLength: 2, commutative: true},
	{name: "AddPtr", argLength: 2},
	{name: "Add32F", argLength: 2, commutative: true},
	{name: "Add64F", argLength: 2, commutative: true},

	{name: "Sub8", argLength: 2},
	{name: "Sub16", argLength: 2},
	{name: "Sub32", argLength: 2},
	{name: "Sub64", argLength: 2},
	{name: "SubPtr", argLength: 2},
	{name: "Sub32F", argLength: 2},
	{name: "Sub64F", argLength: 2},

	{name: "Mul8", argLength: 2, commutative: true},
	{name: "Mul16", argLength: 2, commutative: true},
	{name: "Mul32", argLength: 2, commutative: true},
	{name: "Mul64", argLength: 2, commutative: true},
	{name: "Mul32F", argLength: 2, commutative: true},
	{name: "Mul64F", argLength: 2, commutative: true},

	{name: "Div32F", argLength: 2},
	{name: "Div64F", argLength: 2},

	{name: "Hmul32", argLength: 2, commutative: true},
	{name: "Hmul32u", argLength: 2, commutative: true},
	{name: "Hmul64", argLength: 2, commutative: true},
	{name: "Hmul64u", argLength: 2, commutative: true},

	{name: "Mul32uhilo", argLength: 2, typ: "(UInt32,UInt32)", commutative: true},
	{name: "Mul64uhilo", argLength: 2, typ: "(UInt64,UInt64)", commutative: true},

	{name: "Avg32u", argLength: 2, typ: "UInt32"},
	{name: "Avg64u", argLength: 2, typ: "UInt64"},

	{name: "Div8", argLength: 2},
	{name: "Div8u", argLength: 2},
	{name: "Div16", argLength: 2},
	{name: "Div16u", argLength: 2},
	{name: "Div32", argLength: 2},
	{name: "Div32u", argLength: 2},
	{name: "Div64", argLength: 2},
	{name: "Div64u", argLength: 2},
	{name: "Div128u", argLength: 3},

	{name: "Mod8", argLength: 2},
	{name: "Mod8u", argLength: 2},
	{name: "Mod16", argLength: 2},
	{name: "Mod16u", argLength: 2},
	{name: "Mod32", argLength: 2},
	{name: "Mod32u", argLength: 2},
	{name: "Mod64", argLength: 2},
	{name: "Mod64u", argLength: 2},

	{name: "And8", argLength: 2, commutative: true},
	{name: "And16", argLength: 2, commutative: true},
	{name: "And32", argLength: 2, commutative: true},
	{name: "And64", argLength: 2, commutative: true},

	{name: "Or8", argLength: 2, commutative: true},
	{name: "Or16", argLength: 2, commutative: true},
	{name: "Or32", argLength: 2, commutative: true},
	{name: "Or64", argLength: 2, commutative: true},

	{name: "Xor8", argLength: 2, commutative: true},
	{name: "Xor16", argLength: 2, commutative: true},
	{name: "Xor32", argLength: 2, commutative: true},
	{name: "Xor64", argLength: 2, commutative: true},

	{name: "Lsh8x8", argLength: 2, aux: "Bool"},
	{name: "Lsh8x16", argLength: 2, aux: "Bool"},
	{name: "Lsh8x32", argLength: 2, aux: "Bool"},
	{name: "Lsh8x64", argLength: 2, aux: "Bool"},
	{name: "Lsh16x8", argLength: 2, aux: "Bool"},
	{name: "Lsh16x16", argLength: 2, aux: "Bool"},
	{name: "Lsh16x32", argLength: 2, aux: "Bool"},
	{name: "Lsh16x64", argLength: 2, aux: "Bool"},
	{name: "Lsh32x8", argLength: 2, aux: "Bool"},
	{name: "Lsh32x16", argLength: 2, aux: "Bool"},
	{name: "Lsh32x32", argLength: 2, aux: "Bool"},
	{name: "Lsh32x64", argLength: 2, aux: "Bool"},
	{name: "Lsh64x8", argLength: 2, aux: "Bool"},
	{name: "Lsh64x16", argLength: 2, aux: "Bool"},
	{name: "Lsh64x32", argLength: 2, aux: "Bool"},
	{name: "Lsh64x64", argLength: 2, aux: "Bool"},

	{name: "Rsh8x8", argLength: 2, aux: "Bool"},
	{name: "Rsh8x16", argLength: 2, aux: "Bool"},
	{name: "Rsh8x32", argLength: 2, aux: "Bool"},
	{name: "Rsh8x64", argLength: 2, aux: "Bool"},
	{name: "Rsh16x8", argLength: 2, aux: "Bool"},
	{name: "Rsh16x16", argLength: 2, aux: "Bool"},
	{name: "Rsh16x32", argLength: 2, aux: "Bool"},
	{name: "Rsh16x64", argLength: 2, aux: "Bool"},
	{name: "Rsh32x8", argLength: 2, aux: "Bool"},
	{name: "Rsh32x16", argLength: 2, aux: "Bool"},
	{name: "Rsh32x32", argLength: 2, aux: "Bool"},
	{name: "Rsh32x64", argLength: 2, aux: "Bool"},
	{name: "Rsh64x8", argLength: 2, aux: "Bool"},
	{name: "Rsh64x16", argLength: 2, aux: "Bool"},
	{name: "Rsh64x32", argLength: 2, aux: "Bool"},
	{name: "Rsh64x64", argLength: 2, aux: "Bool"},

	{name: "Rsh8Ux8", argLength: 2, aux: "Bool"},
	{name: "Rsh8Ux16", argLength: 2, aux: "Bool"},
	{name: "Rsh8Ux32", argLength: 2, aux: "Bool"},
	{name: "Rsh8Ux64", argLength: 2, aux: "Bool"},
	{name: "Rsh16Ux8", argLength: 2, aux: "Bool"},
	{name: "Rsh16Ux16", argLength: 2, aux: "Bool"},
	{name: "Rsh16Ux32", argLength: 2, aux: "Bool"},
	{name: "Rsh16Ux64", argLength: 2, aux: "Bool"},
	{name: "Rsh32Ux8", argLength: 2, aux: "Bool"},
	{name: "Rsh32Ux16", argLength: 2, aux: "Bool"},
	{name: "Rsh32Ux32", argLength: 2, aux: "Bool"},
	{name: "Rsh32Ux64", argLength: 2, aux: "Bool"},
	{name: "Rsh64Ux8", argLength: 2, aux: "Bool"},
	{name: "Rsh64Ux16", argLength: 2, aux: "Bool"},
	{name: "Rsh64Ux32", argLength: 2, aux: "Bool"},
	{name: "Rsh64Ux64", argLength: 2, aux: "Bool"},

	{name: "Eq8", argLength: 2, commutative: true, typ: "Bool"},
	{name: "Eq16", argLength: 2, commutative: true, typ: "Bool"},
	{name: "Eq32", argLength: 2, commutative: true, typ: "Bool"},
	{name: "Eq64", argLength: 2, commutative: true, typ: "Bool"},
	{name: "EqPtr", argLength: 2, commutative: true, typ: "Bool"},
	{name: "EqInter", argLength: 2, typ: "Bool"},
	{name: "EqSlice", argLength: 2, typ: "Bool"},
	{name: "Eq32F", argLength: 2, commutative: true, typ: "Bool"},
	{name: "Eq64F", argLength: 2, commutative: true, typ: "Bool"},

	{name: "Neq8", argLength: 2, commutative: true, typ: "Bool"},
	{name: "Neq16", argLength: 2, commutative: true, typ: "Bool"},
	{name: "Neq32", argLength: 2, commutative: true, typ: "Bool"},
	{name: "Neq64", argLength: 2, commutative: true, typ: "Bool"},
	{name: "NeqPtr", argLength: 2, commutative: true, typ: "Bool"},
	{name: "NeqInter", argLength: 2, typ: "Bool"},
	{name: "NeqSlice", argLength: 2, typ: "Bool"},
	{name: "Neq32F", argLength: 2, commutative: true, typ: "Bool"},
	{name: "Neq64F", argLength: 2, commutative: true, typ: "Bool"},

	{name: "Less8", argLength: 2, typ: "Bool"},
	{name: "Less8U", argLength: 2, typ: "Bool"},
	{name: "Less16", argLength: 2, typ: "Bool"},
	{name: "Less16U", argLength: 2, typ: "Bool"},
	{name: "Less32", argLength: 2, typ: "Bool"},
	{name: "Less32U", argLength: 2, typ: "Bool"},
	{name: "Less64", argLength: 2, typ: "Bool"},
	{name: "Less64U", argLength: 2, typ: "Bool"},
	{name: "Less32F", argLength: 2, typ: "Bool"},
	{name: "Less64F", argLength: 2, typ: "Bool"},

	{name: "Leq8", argLength: 2, typ: "Bool"},
	{name: "Leq8U", argLength: 2, typ: "Bool"},
	{name: "Leq16", argLength: 2, typ: "Bool"},
	{name: "Leq16U", argLength: 2, typ: "Bool"},
	{name: "Leq32", argLength: 2, typ: "Bool"},
	{name: "Leq32U", argLength: 2, typ: "Bool"},
	{name: "Leq64", argLength: 2, typ: "Bool"},
	{name: "Leq64U", argLength: 2, typ: "Bool"},
	{name: "Leq32F", argLength: 2, typ: "Bool"},
	{name: "Leq64F", argLength: 2, typ: "Bool"},

	{name: "Greater8", argLength: 2, typ: "Bool"},
	{name: "Greater8U", argLength: 2, typ: "Bool"},
	{name: "Greater16", argLength: 2, typ: "Bool"},
	{name: "Greater16U", argLength: 2, typ: "Bool"},
	{name: "Greater32", argLength: 2, typ: "Bool"},
	{name: "Greater32U", argLength: 2, typ: "Bool"},
	{name: "Greater64", argLength: 2, typ: "Bool"},
	{name: "Greater64U", argLength: 2, typ: "Bool"},
	{name: "Greater32F", argLength: 2, typ: "Bool"},
	{name: "Greater64F", argLength: 2, typ: "Bool"},

	{name: "Geq8", argLength: 2, typ: "Bool"},
	{name: "Geq8U", argLength: 2, typ: "Bool"},
	{name: "Geq16", argLength: 2, typ: "Bool"},
	{name: "Geq16U", argLength: 2, typ: "Bool"},
	{name: "Geq32", argLength: 2, typ: "Bool"},
	{name: "Geq32U", argLength: 2, typ: "Bool"},
	{name: "Geq64", argLength: 2, typ: "Bool"},
	{name: "Geq64U", argLength: 2, typ: "Bool"},
	{name: "Geq32F", argLength: 2, typ: "Bool"},
	{name: "Geq64F", argLength: 2, typ: "Bool"},

	{name: "CondSelect", argLength: 3},

	{name: "AndB", argLength: 2, commutative: true, typ: "Bool"},
	{name: "OrB", argLength: 2, commutative: true, typ: "Bool"},
	{name: "EqB", argLength: 2, commutative: true, typ: "Bool"},
	{name: "NeqB", argLength: 2, commutative: true, typ: "Bool"},
	{name: "Not", argLength: 1, typ: "Bool"},

	{name: "Neg8", argLength: 1},
	{name: "Neg16", argLength: 1},
	{name: "Neg32", argLength: 1},
	{name: "Neg64", argLength: 1},
	{name: "Neg32F", argLength: 1},
	{name: "Neg64F", argLength: 1},

	{name: "Com8", argLength: 1},
	{name: "Com16", argLength: 1},
	{name: "Com32", argLength: 1},
	{name: "Com64", argLength: 1},

	{name: "Ctz8", argLength: 1},
	{name: "Ctz16", argLength: 1},
	{name: "Ctz32", argLength: 1},
	{name: "Ctz64", argLength: 1},
	{name: "Ctz8NonZero", argLength: 1},
	{name: "Ctz16NonZero", argLength: 1},
	{name: "Ctz32NonZero", argLength: 1},
	{name: "Ctz64NonZero", argLength: 1},
	{name: "BitLen8", argLength: 1},
	{name: "BitLen16", argLength: 1},
	{name: "BitLen32", argLength: 1},
	{name: "BitLen64", argLength: 1},

	{name: "Bswap32", argLength: 1},
	{name: "Bswap64", argLength: 1},

	{name: "BitRev8", argLength: 1},
	{name: "BitRev16", argLength: 1},
	{name: "BitRev32", argLength: 1},
	{name: "BitRev64", argLength: 1},

	{name: "PopCount8", argLength: 1},
	{name: "PopCount16", argLength: 1},
	{name: "PopCount32", argLength: 1},
	{name: "PopCount64", argLength: 1},

	{name: "Sqrt", argLength: 1},

	{name: "Floor", argLength: 1},
	{name: "Ceil", argLength: 1},
	{name: "Trunc", argLength: 1},
	{name: "Round", argLength: 1},
	{name: "RoundToEven", argLength: 1},

	{name: "Abs", argLength: 1},
	{name: "Copysign", argLength: 2},

	{name: "Phi", argLength: -1, zeroWidth: true},
	{name: "Copy", argLength: 1},

	{name: "Convert", argLength: 2, zeroWidth: true, resultInArg0: true},

	{name: "ConstBool", aux: "Bool"},
	{name: "ConstString", aux: "String"},
	{name: "ConstNil", typ: "BytePtr"},
	{name: "Const8", aux: "Int8"},
	{name: "Const16", aux: "Int16"},
	{name: "Const32", aux: "Int32"},

	{name: "Const64", aux: "Int64"},
	{name: "Const32F", aux: "Float32"},
	{name: "Const64F", aux: "Float64"},
	{name: "ConstInterface"},
	{name: "ConstSlice"},

	{name: "InitMem", zeroWidth: true},
	{name: "Arg", aux: "SymOff", symEffect: "Read", zeroWidth: true},

	{name: "Addr", argLength: 1, aux: "Sym", symEffect: "Addr"},

	{name: "SP", zeroWidth: true},
	{name: "SB", typ: "Uintptr", zeroWidth: true},
	{name: "Invalid"},

	{name: "Load", argLength: 2},
	{name: "Store", argLength: 3, typ: "Mem", aux: "Typ"},

	{name: "Move", argLength: 3, typ: "Mem", aux: "TypSize"},
	{name: "Zero", argLength: 2, typ: "Mem", aux: "TypSize"},

	{name: "StoreWB", argLength: 3, typ: "Mem", aux: "Typ"},
	{name: "MoveWB", argLength: 3, typ: "Mem", aux: "TypSize"},
	{name: "ZeroWB", argLength: 2, typ: "Mem", aux: "TypSize"},

	{name: "WB", argLength: 3, typ: "Mem", aux: "Sym", symEffect: "None"},

	{name: "ClosureCall", argLength: 3, aux: "Int64", call: true},
	{name: "StaticCall", argLength: 1, aux: "SymOff", call: true, symEffect: "None"},
	{name: "InterCall", argLength: 2, aux: "Int64", call: true},

	{name: "SignExt8to16", argLength: 1, typ: "Int16"},
	{name: "SignExt8to32", argLength: 1, typ: "Int32"},
	{name: "SignExt8to64", argLength: 1, typ: "Int64"},
	{name: "SignExt16to32", argLength: 1, typ: "Int32"},
	{name: "SignExt16to64", argLength: 1, typ: "Int64"},
	{name: "SignExt32to64", argLength: 1, typ: "Int64"},
	{name: "ZeroExt8to16", argLength: 1, typ: "UInt16"},
	{name: "ZeroExt8to32", argLength: 1, typ: "UInt32"},
	{name: "ZeroExt8to64", argLength: 1, typ: "UInt64"},
	{name: "ZeroExt16to32", argLength: 1, typ: "UInt32"},
	{name: "ZeroExt16to64", argLength: 1, typ: "UInt64"},
	{name: "ZeroExt32to64", argLength: 1, typ: "UInt64"},
	{name: "Trunc16to8", argLength: 1},
	{name: "Trunc32to8", argLength: 1},
	{name: "Trunc32to16", argLength: 1},
	{name: "Trunc64to8", argLength: 1},
	{name: "Trunc64to16", argLength: 1},
	{name: "Trunc64to32", argLength: 1},

	{name: "Cvt32to32F", argLength: 1},
	{name: "Cvt32to64F", argLength: 1},
	{name: "Cvt64to32F", argLength: 1},
	{name: "Cvt64to64F", argLength: 1},
	{name: "Cvt32Fto32", argLength: 1},
	{name: "Cvt32Fto64", argLength: 1},
	{name: "Cvt64Fto32", argLength: 1},
	{name: "Cvt64Fto64", argLength: 1},
	{name: "Cvt32Fto64F", argLength: 1},
	{name: "Cvt64Fto32F", argLength: 1},

	{name: "Round32F", argLength: 1},
	{name: "Round64F", argLength: 1},

	{name: "IsNonNil", argLength: 1, typ: "Bool"},
	{name: "IsInBounds", argLength: 2, typ: "Bool"},
	{name: "IsSliceInBounds", argLength: 2, typ: "Bool"},
	{name: "NilCheck", argLength: 2, typ: "Void"},

	{name: "GetG", argLength: 1, zeroWidth: true},
	{name: "GetClosurePtr"},
	{name: "GetCallerPC"},
	{name: "GetCallerSP"},

	{name: "PtrIndex", argLength: 2},
	{name: "OffPtr", argLength: 1, aux: "Int64"},

	{name: "SliceMake", argLength: 3},
	{name: "SlicePtr", argLength: 1, typ: "BytePtr"},
	{name: "SliceLen", argLength: 1},
	{name: "SliceCap", argLength: 1},

	{name: "ComplexMake", argLength: 2},
	{name: "ComplexReal", argLength: 1},
	{name: "ComplexImag", argLength: 1},

	{name: "StringMake", argLength: 2},
	{name: "StringPtr", argLength: 1, typ: "BytePtr"},
	{name: "StringLen", argLength: 1, typ: "Int"},

	{name: "IMake", argLength: 2},
	{name: "ITab", argLength: 1, typ: "Uintptr"},
	{name: "IData", argLength: 1},

	{name: "StructMake0"},
	{name: "StructMake1", argLength: 1},
	{name: "StructMake2", argLength: 2},
	{name: "StructMake3", argLength: 3},
	{name: "StructMake4", argLength: 4},
	{name: "StructSelect", argLength: 1, aux: "Int64"},

	{name: "ArrayMake0"},
	{name: "ArrayMake1", argLength: 1},
	{name: "ArraySelect", argLength: 1, aux: "Int64"},

	{name: "StoreReg", argLength: 1},
	{name: "LoadReg", argLength: 1},

	{name: "FwdRef", aux: "Sym", symEffect: "None"},

	{name: "Unknown"},

	{name: "VarDef", argLength: 1, aux: "Sym", typ: "Mem", symEffect: "None", zeroWidth: true},
	{name: "VarKill", argLength: 1, aux: "Sym", symEffect: "None"},
	{name: "VarLive", argLength: 1, aux: "Sym", symEffect: "Read", zeroWidth: true},
	{name: "KeepAlive", argLength: 2, typ: "Mem", zeroWidth: true},

	{name: "Int64Make", argLength: 2, typ: "UInt64"},
	{name: "Int64Hi", argLength: 1, typ: "UInt32"},
	{name: "Int64Lo", argLength: 1, typ: "UInt32"},

	{name: "Add32carry", argLength: 2, commutative: true, typ: "(UInt32,Flags)"},
	{name: "Add32withcarry", argLength: 3, commutative: true},

	{name: "Sub32carry", argLength: 2, typ: "(UInt32,Flags)"},
	{name: "Sub32withcarry", argLength: 3},

	{name: "Signmask", argLength: 1, typ: "Int32"},
	{name: "Zeromask", argLength: 1, typ: "UInt32"},
	{name: "Slicemask", argLength: 1},

	{name: "Cvt32Uto32F", argLength: 1},
	{name: "Cvt32Uto64F", argLength: 1},
	{name: "Cvt32Fto32U", argLength: 1},
	{name: "Cvt64Fto32U", argLength: 1},
	{name: "Cvt64Uto32F", argLength: 1},
	{name: "Cvt64Uto64F", argLength: 1},
	{name: "Cvt32Fto64U", argLength: 1},
	{name: "Cvt64Fto64U", argLength: 1},

	{name: "Select0", argLength: 1, zeroWidth: true},
	{name: "Select1", argLength: 1, zeroWidth: true},

	{name: "AtomicLoad32", argLength: 2, typ: "(UInt32,Mem)"},
	{name: "AtomicLoad64", argLength: 2, typ: "(UInt64,Mem)"},
	{name: "AtomicLoadPtr", argLength: 2, typ: "(BytePtr,Mem)"},
	{name: "AtomicStore32", argLength: 3, typ: "Mem", hasSideEffects: true},
	{name: "AtomicStore64", argLength: 3, typ: "Mem", hasSideEffects: true},
	{name: "AtomicStorePtrNoWB", argLength: 3, typ: "Mem", hasSideEffects: true},
	{name: "AtomicExchange32", argLength: 3, typ: "(UInt32,Mem)", hasSideEffects: true},
	{name: "AtomicExchange64", argLength: 3, typ: "(UInt64,Mem)", hasSideEffects: true},
	{name: "AtomicAdd32", argLength: 3, typ: "(UInt32,Mem)", hasSideEffects: true},
	{name: "AtomicAdd64", argLength: 3, typ: "(UInt64,Mem)", hasSideEffects: true},
	{name: "AtomicCompareAndSwap32", argLength: 4, typ: "(Bool,Mem)", hasSideEffects: true},
	{name: "AtomicCompareAndSwap64", argLength: 4, typ: "(Bool,Mem)", hasSideEffects: true},
	{name: "AtomicAnd8", argLength: 3, typ: "Mem", hasSideEffects: true},
	{name: "AtomicOr8", argLength: 3, typ: "Mem", hasSideEffects: true},

	{name: "AtomicAdd32Variant", argLength: 3, typ: "(UInt32,Mem)", hasSideEffects: true},
	{name: "AtomicAdd64Variant", argLength: 3, typ: "(UInt64,Mem)", hasSideEffects: true},

	{name: "Clobber", argLength: 0, typ: "Void", aux: "SymOff", symEffect: "None"},
}

var genericBlocks = []blockData{
	{name: "Plain"},
	{name: "If"},
	{name: "Defer"},
	{name: "Ret"},
	{name: "RetJmp"},
	{name: "Exit"},

	{name: "First"},
}

func init() {
	archs = append(archs, arch{
		name:    "generic",
		ops:     genericOps,
		blocks:  genericBlocks,
		generic: true,
	})
}
